import java.io.*;
class Application
{
    BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
    public static void main()
    {
        Application ob=new Application();
        System.out.println("WELCOME USER.This is a project titled 'PROJECT EULER:FIRST THIRTY' which has solutions to the first thirty problems of 'PROJECT EULER'.\nYou can see the solution of any problem you like.\nYou are asked to strictly abide by the given instructions, failing which, will terminate the program.");
        System.out.println("INSTRUCTIONS:\nThe very first thing that I would request you to do is to click on 'Options'(present on top left corner of this screen) followed by clicking 'Unlimited Buffering'.\nThis is done so that the data is not lost on terminal window when it exceeds the buffering limit. After doing this,clear the terminal window,reset JVM and run the program again.(I have assumed that you are using Bluej as IDE.However, if you use any other IDE then do turn on unlimited buffering.) \nThe problems are divided into 5 sets(each comprising of 6 problems).");
        System.out.println("* To view a particular set,input the set number preceded by minus sign(e.g. for set 2, input -2).\n Remember that the request to show the current set is not accepted and terminates the program.");
        System.out.println("* To view solution to a problem, you are simply required to input its number.");
        System.out.println("* If you input the number of the problem which is not in the current set, the program will be terminated.");
        System.out.println("* To exit the program press 0 any time during execution.");
        System.out.println("Here comes the first set:");
        int c=-1;
        while(true)
        {  
            switch(c)
            {
                case -1:ob.set1show();c=ob.set1run();break;
                case -2:ob.set2show();c=ob.set2run();break;
                case -3:ob.set3show();c=ob.set3run();break;
                case -4:ob.set4show();c=ob.set4run();break;
                case -5:ob.set5show();c=ob.set5run();break;
                case -6:ob.set6show();c=ob.set6run();break;
                
            }
            
            }
    

        
               
       
    
    }

    void set1show()
    {  System.out.println("\nSET 1:");
               System.out.println("\nProblem 1:\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. \nThe sum of these multiples is 23.\nFind the sum of all the multiples of 3 or 5 below 1000.");
               System.out.println("\nProblem 2:\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.");
               System.out.println("\nProblem 3:\nThe prime factors of 13195 are 5, 7, 13 and 29.\nWhat is the largest prime factor of the number 600851475143 ?");
               System.out.println("\nProblem 4:\nA palindromic number reads the same both ways. \nThe largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.\nFind the largest palindrome made from the product of two 3-digit numbers.");
               System.out.println("\nProblem 5:\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?");
    }

    void set2show()
    {
        System.out.println("\nSET 2:");
        System.out.println("\nProblem 6:\nThe sum of the squares of the first ten natural numbers is,\n12 + 22 + ... + 102 = 385\nThe square of the sum of the first ten natural numbers is,\n(1 + 2 + ... + 10)^2 = 552 = 3025\nHence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025-385 = 2640.\nFind the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.");
        System.out.println("\nProblem 7:\nBy listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\nWhat is the 10001st prime number?");
        System.out.println("\nProblem 8:\nThe four adjacent digits in the given 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.\n731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560789112949495459501737958331952853208805511\n125406987471585238630507156932909632952274430435576689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749\n303589072962904915604407723907138105158593079608667017242712188399879790879227492190169972088809377665727333001053367881220235421809751254540594752243\n525849077116705560136048395864467063244157221553975369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474\n821663704844031998900088952434506585412275886668811642717147992444292823086346567481391912316282458617866458359124566529476545682848912883142607690042\n242190226710556263211111093705442175069416589604080719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606\n0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\nFind the thirteen adjacent digits in this 1000-digit number that have the greatest product. What is the value of this product?");
        System.out.println("\nProblem 9:\nA Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\na^2 + b^2 = c^2\nFor example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\nThere exists exactly one Pythagorean triplet for which a + b + c = 1000.Find the product abc.");
        System.out.println("\nProblem 10:\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\nFind the sum of all the primes below two million.");
    }

    void set3show()
    {
        System.out.println("\nSET 3:");
        System.out.println("\nProblem 11:\nIn the 20×20 grid below, four numbers along a diagonal line are in inverted commas.\n08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n32 98 81 28 64 23 67 10\"26\"38 40 67 59 54 70 66 18 38 64 70\n67 26 20 68 02 62 12 20 95\"63\"94 39 63 08 40 91 66 49 94 21\n24 55 58 05 66 73 99 26 97 17\"78\"78 96 83 14 88 34 89 63 72\n21 36 23 09 75 00 76 44 20 45 35\"14\"00 61 33 97 34 31 33 95\n78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\nThe product of these numbers is 26 × 63 × 78 × 14 = 1788696.\nWhat is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in this 20×20 grid?");
        System.out.println("\nProblem 12:\nThe sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\nLet us list the factors of the first seven triangle numbers:\n 1: 1\n 3: 1,3\n 6: 1,2,3,6\n10: 1,2,5,10\n15: 1,3,5,15\n21: 1,3,7,21\n28: 1,2,4,7,14,28\nWe can see that 28 is the first triangle number to have over five divisors.\nWhat is the value of the first triangle number to have over five hundred divisors?");
        System.out.println("\nProblem 13:\nWork out the first ten digits of the sum of the given one-hundred 50-digit numbers.\n[Here I have not mentioned the numbers because I considered it only space consuming, the actual problem can be understood without them as well.However, if you wish to see the numbers,\nthen you can refer source code of this problem's solution where the numbers are stored one after the other in an array.]");
        System.out.println("\nProblem 14:\nThe following iterative sequence is defined for the set of positive integers:\nn becomes n/2 (if n is even)\nn becomes 3n + 1 (if n is odd)\nUsing the rule above and starting with 13, we generate the following sequence:\n13 ? 40 ? 20 ? 10 ? 5 ? 16 ? 8 ? 4 ? 2 ? 1\nIt can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.\nWhich starting number, under one million, produces the longest chain?\nNOTE: Once the chain starts the terms are allowed to go above one million.");     
        System.out.println("\nProblem 15:\nStarting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are \nexactly 6 routes to the bottom right corner.\nHow many such routes are there through a 20×20 grid?");
        
    }

    void set4show()
    {
        System.out.println("\nSET 4:");
        System.out.println("\nProblem 16:\n2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.\nWhat is the sum of the digits of the number 2^1000?");
        System.out.println("\nProblem 17:\nIf the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.\nIf all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?\nNOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters \nand 115 (one hundred and fifteen) contains 20 letters. The use of \"and\" when writing out numbers is in \ncompliance with British usage.");
        System.out.println("\nProblem 18:\nBy starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.\n   3\n  7 4\n 2 4 6\n8 5 9 3 That is, 3 + 7 + 4 + 9 = 23.\nFind the maximum total from top to bottom of the triangle below:\n                     75\n                    95 64\n                  17 47 82\n                 18 35 87 10\n               20 04 82 47 65\n              19 01 23 75 03 34\n            88 02 77 73 07 63 67\n           99 65 04 28 06 16 70 92\n         41 41 26 56 83 40 80 70 33\n       41 48 72 33 47 32 37 16 94 29\n      53 71 44 65 25 43 91 52 97 51 14\n     70 11 33 28 77 73 17 78 39 68 17 57\n   91 71 52 38 17 14 91 43 58 50 27 29 48\n  63 66 04 68 89 53 67 30 73 16 69 87 40 31\n04 62 98 27 23 09 70 98 73 93 38 53 60 04 23");
        System.out.println("\nProblem 19:\nYou are given the following information, but you may prefer to do some research for yourself.\n*1 Jan 1900 was a Monday.\n*September,April, June and November have thirty days.\n All the rest have thirty-one,\n Saving February alone,\n Which has twenty-eight, rain or shine.\n And on leap years, twenty-nine.\n*A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.\nHow many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?");
        System.out.println("\nProblem 20:\nn! means n × (n − 1) × ... × 3 × 2 × 1\nFor example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,\nand the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.\nFind the sum of the digits in the number 100!");
    }

    void set5show()
    {
        System.out.println("\nSET 5:");
        System.out.println("\nProblem 21:\nLet d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).\nIf d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.\nFor example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.\nEvaluate the sum of all the amicable numbers under 10000.");
        System.out.println("\nProblem 22:\nUsing names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.\nFor example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.\nWhat is the total of all the name scores in the file?[The file was to be downloaded and all those names are in the source code(if you want to have a look).]");
        System.out.println("\nProblem 23:\nA perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.\nA number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.\nAs 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.\nFind the sum of all the positive integers which cannot be written as the sum of two abundant numbers.");
        System.out.println("\nProblem 24:\nA permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:\n012   021   102   120   201   210\nWhat is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?");
        System.out.println("\nProblem 25:\nThe Fibonacci sequence is defined by the recurrence relation:\nFn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.\nHence the first 12 terms will be:\nF1 = 1  F2 = 1  F3 = 2  F4 = 3  F5 = 5  F6 = 8  F7 = 13  F8 = 21  F9 = 34  F10 = 55  F11 = 89  F12 = 144\nThe 12th term, F12, is the first term to contain three digits.\nWhat is the first term in the Fibonacci sequence to contain 1000 digits?");
        }

    void set6show()
    {
        System.out.println("\nSET 6:");
        System.out.println("\nProblem 26:\nA unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:\n1/2	= 	0.5\n1/3	= 	0.(3)\n1/4	= 	0.25\n1/5	= 	0.2\n1/6	= 	0.1(6)\n1/7	= 	0.(142857)\n1/8	= 	0.125\n1/9	= 	0.(1)\n1/10	= 	0.1\nWhere 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.\nFind the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.");
        System.out.println("\nProblem 27:\nEuler discovered the remarkable quadratic formula:\nn² + n + 41\nIt turns out that the formula will produce 40 primes for the consecutive values n = 0 to 39. However, when n = 40, 402 + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and certainly when n = 41, 41² + 41 + 41 is clearly divisible by 41.\nThe incredible formula  n² − 79n + 1601 was discovered, which produces 80 primes for the consecutive values n = 0 to 79. The product of the coefficients, −79 and 1601, is −126479.\nConsidering quadratics of the form:\nn² + an + b, where |a| < 1000 and |b| < 1000\nwhere |n| is the modulus/absolute value of n\ne.g. |11| = 11 and |−4| = 4\nFind the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.");
        System.out.println("\nProblem 28:\nStarting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:\n21 22 23 24 25\n20  7  8  9 10\n19  6  1  2 11\n18  5  4  3 12\n17 16 15 14 13\nIt can be verified that the sum of the numbers on the diagonals is 101.\nWhat is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?");
        System.out.println("\nProblem 29:\nConsider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:\n22=4, 23=8, 24=16, 25=32\n32=9, 33=27, 34=81, 35=243\n42=16, 43=64, 44=256, 45=1024\n52=25, 53=125, 54=625, 55=3125\nIf they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:\n4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125\nHow many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?");
        System.out.println("\nProblem 30:\nSurprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:\n1634 = 14 + 64 + 34 + 44\n8208 = 84 + 24 + 04 + 84\n9474 = 94 + 44 + 74 + 44\nAs 1 = 14 is not a sum it is not included.\nThe sum of these numbers is 1634 + 8208 + 9474 = 19316.\nFind the sum of all the numbers that can be written as the sum of fifth powers of their digits.");
       }
    void lastwords()
    {
        System.out.print("\nThanks for using the program.The prograam you used,covered only 30 project euler problems with solutions.For more problems you can visit PROJECT EULER's official website,'www.projecteuler.net'.");
        System.out.print("\n\nThis program was conceptualize,designed and debugged by MADHUR PANWAR,class XII,sesssion 2014-2015.");
        System.out.print("\nEnjoy the great world of programming and computing. Goodbye.");
        System.exit(0);
    }
    int set1run()
    {
        int g=0;
        
        try
        {
        do{
            System.out.println("\nEnter either problem number(1 to 5) or set number(-2,-3,-4,-5,-6) or 0(to exit):");
            g=Integer.parseInt(in.readLine());
            switch(g)
            {
                case 0:lastwords();
                case 1:P001.p001();break;
                case 2:P002.p002();break;
                case 3:P003.p003();break;
                case 4:P004.p004();break;
                case 5:P005.p005();break;
            }
        }while(g<=5&&g>=0);
        if(g>=-6&&g<=-1&&g!=-1)
        {
            return g;
        }
        else 
        {
            System.out.println("Program terminated due to invalid integer input.");
            lastwords();
        }
    }
    catch(Exception e)
    {
        System.out.println("Program terminated due to an exception.The message for exception is:  "+e);
        lastwords();
    }
    return g;//not required because control never reaches here,but something was to be wriiten otherwise it was 'missing return statement' error.
}
int set2run()
    {
        int g=0;
        
        try
        {
        do{
            System.out.println("\nEnter either problem number(6 to 10) or set number(-1,-3,-4,-5,-6) or 0(to exit):");
            g=Integer.parseInt(in.readLine());
            switch(g)
            {
                case 0:lastwords();
                case 6:P006.p006();break;
                case 7:P007.p007();break;
                case 8:P008.p008();break;
                case 9:P009.p009();break;
                case 10:P010.p010();break;
            }
        }while((g<=10&&g>=6)||g==0);
        if(g>=-6&&g<=-1&&g!=-2)
        {
            return g;
        }
        else 
        {
            System.out.println("Program terminated due to invalid integer input.");
            lastwords();
        }
    }
    catch(Exception e)
    {
        System.out.println("Program terminated due to an exception.The message for exception is:  "+e);
        lastwords();
    }
    return g;//not required because control never reaches here,but something was to be wriiten otherwise it was 'missing return statement' error.
}
int set3run()
    {
        int g=0;
        
        try
        {
        do{
            System.out.println("\nEnter either problem number(11 to 15) or set number(-1,-2,-4,-5,-6) or 0(to exit):");
            g=Integer.parseInt(in.readLine());
             switch(g)
            {
                case 0:lastwords();
                case 11:P011.p011();break;
                case 12:P012.p012();break;
                case 13:P013.p013();break;
                case 14:P014.p014();break;
                case 15:P015.p015();break;
            }
        }while((g<=15&&g>=11)||g==0);
        if(g>=-6&&g<=-1&&g!=-3)
        {
            return g;
        }
        else 
        {
            System.out.println("Program terminated due to invalid integer input.");
            lastwords();
        }
    }
    catch(Exception e)
    {
        System.out.println("Program terminated due to an exception.The message for exception is:  "+e);
        lastwords();
    }
    return g;//not required because control never reaches here,but something was to be wriiten otherwise it was 'missing return statement' error.
}
int set4run()
    {
        int g=0;
        
        try
        {
        do{
            System.out.println("\nEnter either problem number(16 to 20) or set number(-1,-2,-3,-5,-6) or 0(to exit):");
            g=Integer.parseInt(in.readLine());
            switch(g)
            {
                case 0:lastwords();
                case 16:P016.p016();break;
                case 17:P017.p017();break;
                case 18:P018.p018();break;
                case 19:P019.p019();break;
                case 20:P020.p020();break;
            }
        }while((g<=20&&g>=16)||g==0);
        if(g>=-6&&g<=-1&&g!=-4)
        {
            return g;
        }
        else 
        {
            System.out.println("Program terminated due to invalid integer input.");
            lastwords();
        }
    }
    catch(Exception e)
    {
        System.out.println("Program terminated due to an exception.The message for exception is:  "+e);
        lastwords();
    }
    return g;//not required because control never reaches here,but something was to be wriiten otherwise it was 'missing return statement' error.
}
int set5run()
    {
        int g=0;
        
        try
        {
        do{
            System.out.println("\nEnter either problem number(21 to 25) or set number(-1,-2,-3,-4,-6) or 0(to exit):");
            g=Integer.parseInt(in.readLine());
            switch(g)
            {
                case 0:lastwords();
                case 21:P021.p021();break;
                case 22:P022.p022();break;
                case 23:P023.p023();break;
                case 24:P024.p024();break;
                case 25:P025.p025();break;
            }
        }while((g<=25&&g>=21)||g==0);
        if(g>=-6&&g<=-1&&g!=-5)
        {
            return g;
        }
        else 
        {
            System.out.println("Program terminated due to invalid integer input.");
            lastwords();
        }
    }
    catch(Exception e)
    {
        System.out.println("Program terminated due to an exception.The message for exception is:  "+e);
        lastwords();
    }
    return g;//not required because control never reaches here,but something was to be wriiten otherwise it was 'missing return statement' error.
}
int set6run()
    {
        int g=0;
        
        try
        {
        do{
            System.out.println("\nEnter either problem number(26 to 30) or set number(-1,-2,-3,-4,-5) or 0(to exit):");
            g=Integer.parseInt(in.readLine());
            switch(g)
            {
                case 0:lastwords();
                case 26:P026.p026();break;
                case 27:P027.p027();break;
                case 28:P028.p028();break;
                case 29:P029.p029();break;
                case 30:P030.p030();break;
            }
        }while((g<=30&&g>=26)||g==0);
        if(g>=-6&&g<=-1&&g!=-6)
        {
            return g;
        }
        else 
        {
            System.out.println("Program terminated due to invalid integer input.");
            lastwords();
        }
    }
    catch(Exception e)
    {
        System.out.println("Program terminated due to an exception.The message for exception is:  "+e);
        lastwords();
    }
    return g;//not required because control never reaches here,but something was to be wriiten otherwise it was 'missing return statement' error.
  }
}
class P001
{
    public static void p001()
    {
        long sum=0;//variable to store sum of required multiples
        for (int i=3;i<1000; i++)//i is looping variable
        {
            if((i%3==0)||(i%5==0))//condition to find multiples of 3 or 5
            {sum+=i;}
        }
        System.out.println("The sum of all the multiples of 3 or 5 below 1000 is: "+ sum);
    }
}
class P002
{
    public static void p002()
    {
        long sum=0;long a=0,b=1,c=0;//variable declarations
        while(c<4000000)
        {
            if(c%2==0)//checks for divisibility by 2
            {sum+=c;}
            c=a+b;
            a=b;
            b=c;

        }
        System.out.println("Considering the terms in the Fibonacci sequence whose values do not exceed four million,the sum of the even-valued terms is: "+ sum);
    }
}
class P003 
{
    /* 
     * Algorithm: Divide out all the smallest prime factors except the last one.
     * For example, 1596 = 2 * 2 * 3 * 7 * 19. The algorithm ensures that the smallest factors will be found first.
     * After dividing out the smallest factors, the last factor to be found will be equal to the quotient, so it must be the largest prime factor.
     */
    public static void p003() 
    {
        long n = 600851475143L;
        while (true) 
        {
            long p = new P003().smallestFactor(n);
            if (p < n)
                n /= p;
            else
                break;
        }
        System.out.println("The largest prime factor of the number 600851475143 is: "+n);
    }
    long smallestFactor(long n) 
    {
        for (long i = 2, end = (long)Math.sqrt(n); i <= end; i++)
        {
            if (n % i == 0)
                return i;
        }
        return n;  
    }
}
class P004
{
    public static void p004()
    {
        long lp=0;
        for(int i=100;i<1000;i++)
        {
            for(int j=100;j<1000;j++)
            {
                long p=i*j;
                if(p>lp&&new P004().palin(p))
                {lp=p;}
            }
        }
        System.out.println("The largest palindrome made from the product of two 3-digit numbers is: "+lp);
    }
    boolean palin(long n)
    {
        int d=0;long N=n,r=0;
        while(N!=0)
        {
            d=(int)N%10;
            r=r*10+d;
            N=N/10;
        }
        if(r==n)return true;
        return false;
    }
}
class P005
{
    public static void p005()
    {
        long n=0;
        for(int i=20;;i+=20)
        {
            if(i%2==0&&i%3==0&&i%4==0&&i%5==0&&i%6==0&&i%7==0&&i%8==0&&i%9==0&&i%10==0&&i%11==0&&i%12==0&&i%13==0&&i%14==0&&i%15==0&&i%16==0&&i%17==0&&i%18==0&&i%19==0)
            {n=i;break;}
        }
        System.out.println("The smallest positive number that is evenly divisible by all of the numbers from 1 to 20 is: "+n);
    }
}
class P006
{
    public static void p006()
    {
        long sumsq=0,sqsum=0;
        sqsum=(long)Math.pow(((100*101)/2),2);//finds (1+2+3+.......+100)^2
        for(int i=1;i<=100;i++)
        {
            sumsq=sumsq+(long)Math.pow(i,2);//finds 1^2+2^2+3^2+.......100^2
        }
        System.out.println("The difference between the sum of the squares of the first one hundred natural numbers and the square of the sum is: "+(sqsum-sumsq));
    }
}
class P007
{
    public static void p007()
    {
        int c=0,i=2,p=1;
        while(true)
        {
            p=1;
            for(int j=2;j<=Math.sqrt(i);j++)//check for prime
            {
                if(i%j==0)
                {p=0;break;}
            }
            if(p==1)
            {c++;}
            if(c==10001)
            {System.out.println("The 10001st prime number is: "+i);break;}
            i++;
        }
    }
}
class P008
{
    public static void p008()
    {
        int a[]={7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0};
        long mp=-1,p=-1;int pos=-1;//variable declarations
        for(int i=0;i<=987;i++)
        {
            p=a[i]*a[i+1]*a[i+2]*a[i+3]*a[i+4]*a[i+5]*a[i+6]*a[i+7]*a[i+8]*a[i+9]*a[i+10]*a[i+11]*a[i+12];//finds the product of thirteen adjacent digits
            if(p>mp)
            {
                mp=p;
                pos=i;
            }
        }
        System.out.println("The thirteen adjacent digits in the 1000-digit number that have the greatest product are "+a[pos]+"*"+a[pos+1]+"*"+a[pos+2]+"*"+a[pos+3]+"*"+a[pos+4]+"*"+a[pos+5]+"*"+a[pos+6]+"*"+a[pos+7]+"*"+a[pos+8]+"*"+a[pos+9]+"*"+a[pos+10]+"*"+a[pos+11]+"*"+a[pos+12]+"="+mp);
    }
}
class P009
{
    public static void p009()
    {
        int a=0,b=0,c=0;long abc=0;
        out:
        for(a=1;a<1000;a++)
        {
            for(b=a+1;b<1000;b++)
            {
                c=1000-a-b;
                if(a*a+b*b==c*c)// Note: This implies b < c
                {abc=a*b*c;break out;}
            }
        }
        System.out.println("The Pythagorean triplet for which a + b + c = 1000 has the product abc: "+abc);
    }
}
class P010
{   
    int N=2000000;
    boolean isPrime[]=new boolean[N];long ps=0;//last index is 1999999 which is also the last number that we will check for prime
    public static void p010()
    { 
        P010 ob=new P010();
        ob.ESieve();
        ob.sumprime();
        System.out.println("The sum of all the primes below two million is: "+ob.ps);
    }
    void ESieve()
    {
        for(int i=2;i<N;i++)
        {
            isPrime[i]=true;
        }
        for(int i=2;i<=(int)Math.sqrt(N);i++)
        {
            if(isPrime[i])
            {//if i is prime mark its multiples as non prime
            for(int j=i;i*j<=N-1;j++)
                {isPrime[i*j]=false;}
            }
        }
    }
    void sumprime()
    {
        for(int i=2;i<=N-1;i++)
        {
            if(isPrime[i])
            {ps=ps+i;}
        }
    }
}
    class P011
{
    public static void p011()
    {
        int a[][] = {
                { 8,02,22,97,38,15,00,40,00,75,04,05,07,78,52,12,50,77,91, 8},
                {49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,04,56,62,00},
                {81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,03,49,13,36,65},
                {52,70,95,23,04,60,11,42,69,24,68,56,01,32,56,71,37,02,36,91},
                {22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80},
                {24,47,32,60,99,03,45,02,44,75,33,53,78,36,84,20,35,17,12,50},
                {32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70},
                {67,26,20,68,02,62,12,20,95,63,94,39,63, 8,40,91,66,49,94,21},
                {24,55,58,05,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72},
                {21,36,23, 9,75,00,76,44,20,45,35,14,00,61,33,97,34,31,33,95},
                {78,17,53,28,22,75,31,67,15,94,03,80,04,62,16,14, 9,53,56,92},
                {16,39,05,42,96,35,31,47,55,58,88,24,00,17,54,24,36,29,85,57},
                {86,56,00,48,35,71,89,07,05,44,44,37,44,60,21,58,51,54,17,58},
                {19,80,81,68,05,94,47,69,28,73,92,13,86,52,17,77,04,89,55,40},
                {04,52, 8,83,97,35,99,16,07,97,57,32,16,26,26,79,33,27,98,66},
                {88,36,68,87,57,62,20,72,03,46,33,67,46,55,12,32,63,93,53,69},
                {04,42,16,73,38,25,39,11,24,94,72,18, 8,46,29,32,40,62,76,36},
                {20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,04,36,16},
                {20,73,35,29,78,31,90,01,74,31,49,71,48,86,81,16,23,57,05,54},
                {01,70,54,71,83,51,54,69,16,92,33,48,61,43,52,01,89,19,67,48}
            },i,j;long mp=-1,pd=1;
        for(i=0;i<20;i++)
        {
            for(j=0;j<20;j++)
            {
                if(i<=16)//calculates product vertically
                {pd=a[i][j]*a[i+1][j]*a[i+2][j]*a[i+3][j];}
                mp=Math.max(pd,mp);
                if(j<=16)//calculates product horizontally
                {pd=a[i][j]*a[i][j+1]*a[i][j+2]*a[i][j+3];}
                mp=Math.max(pd,mp);
                if(i>=3&&j<=16)//calculates product diagonally upwards rightwards
                {pd=a[i][j]*a[i-1][j+1]*a[i-2][j+2]*a[i-3][j+3];}
                mp=Math.max(pd,mp);
                if(i>=3&&j>=3)//calculates product diagonally upwards leftwards
                {pd=a[i][j]*a[i-1][j-1]*a[i-2][j-2]*a[i-3][j-3];}
                mp=Math.max(pd,mp);
            }
        }
        System.out.println("The greatest product of four adjacent numbers in same direction (up, down, left, right, or diagonally) in the 20*20 grid is: "+mp);
    }
}
class P012
{
    public static void p012()
    {
        int t=0,j=1,rt; P012 ob=new P012();
        while(true)
        {   t=t+j;
            j++;
            if(ob. nofac(t)>500)
            {rt=t;break;}
        }
        System.out.println("The value of the first triangle number to have over five hundred divisors is: "+rt);
    }
    int nofac(int x)
    {   int f=0,sq=(int)Math.sqrt(x);
        for(int i=1;i<=sq;i++)//The following logic to find the number of divisors of a number is a mathematical one which
        //saves time resources of our CPU and hence I chose it rather than conventionally checking by division.
        {
            if(x%i==0)
                f+=2;
        } //Correction if the number is a perfect square
        if (sq * sq == x) {f--;}
        return f;
    }
}
class P013
{
    public static void p013()
    {
        String str="37107287533902102798797998220837590246510135740250463769376774900097126481248969700780504170182605387432498619952474105947423330951305812372661730962991942213363574161572522430563301811072406154908250230675882075393461711719803104210475137780632466768926167069662363382013637841838368417873436172675728112879812849979408065481931592621691275889832738442742289174325203219235894228767964876702721893184745144573600130643909116721685684458871160315327670386486105843025439939619828917593665686757934951621764571418565606295021572231965867550793241933316490635246274190492910143244581382266334794475817892575867718337217661963751590579239728245598838407582035653253593990084026335689488301894586282278288018119938482628201427819413994056758715117009439035398664372827112653829987240784473053190104293586865155060062958648615320752733719591914205172558297169388870771546649911559348760353292171497005693854370070576826684624621495650076471787294438377604532826541087568284431911906346940378552177792951453612327252500029607107508256381565671088525835072145876576172410976447339110607218265236877223636045174237069058518606604482076212098132878607339694128114266041808683061932846081119106155694051268969251934325451728388641918047049293215058642563049483624672216484350762017279180399446930047329563406911573244438690812579451408905770622942919710792820955037687525678773091862540744969844508330393682126183363848253301546861961243487676812975343759465158038628759287849020152168555482871720121925776695478182833757993103614740356856449095527097864797581167263201004368978425535399209318374414978068609844840309812907779179908821879532736447567559084803087086987551392711854517078544161852424320693150332599594068957565367821070749269665376763262354472106979395067965269474259770973916669376304263398708541052684708299085211399427365734116182760315001271653786073615010808570091499395125570281987460043753582903531743471732693212357815498262974255273730794953759765105305946966067683156574377167401875275889028025717332296191766687138199318110487701902712526768027607800301367868099252546340106163286652636270218540497705585629946580636237993140746255962240744869082311749777923654662572469233228109171419143028819710328859780666976089293863828502533340334413065578016127815921815005561868836468420090470230530811728164304876237919698424872550366387845831148769693215490281042402013833512446218144177347063783299490636259666498587618221225225512486764533677201869716985443124195724099139590089523100588229554825530026352078153229679624948164195386821877476085327132285723110424803456124867697064507995236377742425354112916842768655389262050249103265729672370191327572567528565324825826546309220705859652229798860272258331913126375147341994889534765745501184957014548792889848568277260777137214037988797153829820378303147352772158034814451349137322665138134829543829199918180278916522431027392251122869539409579530664052326325380441000596549391598795936352974615218550237130764225512118369380358038858490341698116222072977186158236678424689157993532961922624679571944012690438771072750481023908955235974572318970677254791506150550495392297953090112996751986188088225875314529584099251203829009407770775672113067397083047244838165338735023408456470580773088295917476714036319800818712901187549131054712658197623331044818386269515456334926366572897563400500428462801835170705278318394258821455212272512503275512160354698120058176216521282765275169129689778932238195734329339946437501907836945765883352399886755061649651847751807381688378610915273579297013376217784275219262340194239963916804498399317331273132924185707147349566916674687634660915035914677504995186714302352196288948901024233251169136196266227326746080059154747183079839286853520694694454072476841822524674417161514036427982273348055556214818971426179103425986472045168939894221798260880768528778364618279934631376775430780936333301898264209010848802521674670883215120185883543223812876952786713296124747824645386369930090493103636197638780396218407357239979422340623539380833965132740801111666627891981488087797941876876144230030984490851411606618262936828367647447792391803351109890697907148578694408955299065364044742557608365997664579509666024396409905389607120198219976047599490197230297649139826800329731560371200413779037855660850892521673093931987275027546890690370753941304265231501194809377245048795150954100921645863754710598436791786391670211874924319957006419179697775990283006991536871371193661495281130587638027841075444973307840789923115535562561142322423255033685442488917353448899115014406480203690680639606723221932041495354150312888033953605329934036800697771065056663195481234880673210146739058568557934581403627822703280826165707739483275922328459417065250945123252306082291880205877731971983945018088807242966198081119777158542502016545090413245809786882778948721859617721078384350691861554356628840622574736922845095162084960398013400172393067166682355524525280460972253503534226472524250874054075591789781264330331690";
        char a[]=str.toCharArray();
        long carry=0,sum=0;int d,k=1;String s="";
        for(int i=49;i>=0;i--)
        {   sum=0;k=1;
            for(int j=i;k<=100;j+=50,k++)
            {sum=sum+(a[j]-'0');}
            sum=sum+carry;
            carry=sum/10;
            d=(int)sum%10;
            if(i!=0)
            {s=Integer.toString(d)+s;}
            else 
                s=Long.toString(carry)+Integer.toString(d)+s;
        }
        System.out.println("The first ten digits of the sum of the given one-hundred 50-digit numbers is: "+s.substring(0,10));
    }
}
class P014
{
    public static void p014()
    {
        int number = 1000000,sequenceLength = 0,startingNumber = 0;
        long sequence;int[] cache = new int[number + 1];
        //Initialising cache
        for (int i = 0; i < cache.length; i++)
        {
            cache[i] = -1;
        }
        cache[1] = 1;

        for (int i = 2; i <= number; i++)
        {
            sequence = i;
            int k = 0;
            while (sequence != 1 && sequence >= i)
            {
                k++;
                if ((sequence % 2) == 0)
                {sequence = sequence / 2;} 
                else {sequence = sequence * 3 + 1;}
            }
            //Store result in cache
            cache[i] = k + cache[(int)sequence];

            //Check if sequence is the best solution
            if (cache[i] > sequenceLength) 
            {
                sequenceLength = cache[i];
                startingNumber = i;
            }
        }
        System.out.println("The starting number, under one million which produces the longest chain is: "+ startingNumber);
    }
}
class P015
{
    /*Algorithm:
     *For this problem we will use the mathematical concept of combinations.
     *In order to pose the question as a combinatorics question, we must realise a few things(generalising the observations to an NxN grid):
    1.All paths can be described as a series of directions. And since we can only go down and right, we could describe the paths as a series of Ds and Rs. In a 2Ã—2 grid all paths are 1) DDRR 2) DRDR 3) DRRD 4) RDRD 5) RDDR 6) RRDD.
    2.Based on the example we can see that all paths have exactly size 2N of which there are N Rs and N Ds.
    3.If we have 2N empty spaces and place all Rs in all possible ways, then the placement of the Ds are given by empty spaces.
    Once we have made these realisations, we can repose the question as:
    In how many ways can we choose N(20 in our problem) out of 2N possible places if the order does not matter?
    And combinatorics gives us an easy answer to that. Thus we need to find C(2N,N) which is (2N)!/((N)!*(2N-N)!)=(2N)!/((N)!)^2=(((2N)*(2N-1)*(2N-2)*(2N-3).........(2N-N+2)*(2N-N+1))/N!),this is what the following code evaluates,and N being 20 for our problem.*/

    public static void p015()
    {
        int N = 20;
        long paths = 1;
        for (int i = 0; i < N; i++)
        {
            paths *= (2 * N) - i;
            paths /= (i + 1);
        }
        System.out.println("Starting in the top left corner of a 20*20 grid,and going without backtracking there are "+paths+"\nroutes to the bottom right corner.");
    }
}
class P016
{
    public static void p016()
    {
        String str="22";
        long carry=0,sum=0;int d,k=1,fsum=0;String s="";int numsToAdd=2,sizeOfNum=1;
        for(int l=1;l<1000;l++)
        { char a[]=str.toCharArray();
            for(int i=sizeOfNum-1;i>=0;i--)
            {   sum=0;k=1;
                for(int j=i;k<=numsToAdd;j+=sizeOfNum,k++)
                {sum=sum+(a[j]-'0');}
                sum=sum+carry;
                carry=sum/10;
                d=(int)sum%10;
                if(i!=0)
                    s=Integer.toString(d)+s;
                else 
                    s=Long.toString(carry)+Integer.toString(d)+s;

            }
            sizeOfNum=s.length();
            str=s+s;if(l!=1000-1)s="";
        }
        for(int i=0;i<s.length();i++)
        {fsum=fsum+(s.charAt(i)-'0');
        }
        System.out.println("The sum of the digits of the number 2^1000 is: "+fsum);
    }
}
class P017
 {
  public static void p017()
  {
        System.out.println("Number of letters used to write all numbers from 1-1000(both inclusive) in words is: "+new P017().run());
  }
  int run() 
  {
        int sum = 0;
        for (int i = 1; i <= 1000; i++)
            sum += toEnglish(i).length();
        return sum;
  }

    String[] ONES = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};  // Requires 0 <= n <= 9
    String[] TEENS = {"ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};
    String[] TENS = {"twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"};
  // Requires 0 <= n <= 99999
  String toEnglish(int n) 
    {
        if (n < 100)
            return tens(n);
        else {
            String big = "";
            if (n >= 1000)
                big += tens(n / 1000) + "thousand";
            if (n / 100 % 10 != 0)
                big += ONES[n / 100 % 10] + "hundred";

            return big + (n % 100 != 0 ? "and" + tens(n % 100) : "");
        }
    }
  // Requires 0 <= n <= 99
  String tens(int n)
  {
        if (n < 10)
            return ONES[n];
        else if (n < 20)  // TEENS
            return TEENS[n - 10];
        else
            return TENS[n / 10 - 2] + (n % 10 != 0 ? ONES[n % 10] : "");
  }
}
class P018
{
    int[][] triangle = {
            {75},
            {95,64},
            {17,47,82},
            {18,35,87,10},
            {20,04,82,47,65},
            {19,01,23,75,03,34},
            {88,02,77,73,07,63,67},
            {99,65,04,28,06,16,70,92},
            {41,41,26,56,83,40,80,70,33},
            {41,48,72,33,47,32,37,16,94,29},
            {53,71,44,65,25,43,91,52,97,51,14},
            {70,11,33,28,77,73,17,78,39,68,17,57},
            {91,71,52,38,17,14,91,43,58,50,27,29,48},
            {63,66,04,68,89,53,67,30,73,16,69,87,40,31},
            {04,62,98,27,23, 9,70,98,73,93,38,53,60,04,23}
        };
    public static void p018() {
        System.out.println("The maximum total from top to bottom of the given triangle is: "+new P018().run());
    }
    public int run() 
    {
        for (int i = triangle.length - 2; i >= 0; i--) {
            for (int j = 0; j < triangle[i].length; j++)
                triangle[i][j] += Math.max(triangle[i + 1][j], triangle[i + 1][j + 1]);  // Reduces the triangle at each iteration by comparing maximum sum starting from the bottom.
        }
        return triangle[0][0];
    }
}
class P019
{
    /*Algorithm:
     *The given information in the question helps us realize that the first sunday of 20th century was on 6 Jan 1901(we will find it out though).
     *Hence starting from this day every seventh day will be a Sunday.
     *If that day is the first of a month we increase our count by 1.
     */
    //Throughout the program, i represent year,j reprenent month and k represent day of month
    int a[]={0,31,28,31,30,31,30,31,31,30,31,30,31,31};
    public static void p019()
    {
        P019 ob=new P019();
        int k= ob.firstSunday1901();
        int c=ob.countSundays(k);
        System.out.println("The number of Sundays falling on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000) is: "+c);
    }  
    int firstSunday1901()//returns the day of first sunday in Jan 1901
    {
        int k=0,j=1;//kth day of Jan 1901 is sunday after the loop completion
        while(j<13)
        {
            k+=7;
            if(k>a[j])
            {
                k=k%a[j];
                j++;
            }
        }
        return k;
    }
    int countSundays(int fS)//returns total number of sundays in 20th century
    { 
        int count=0,k=fS,j=1;
        for(int i=1901;i<=2000;i++)
        {   j=1;a[2]=febDays(i);
            while(j<13)
            {
                k+=7;
                if(k>a[j])
                {
                    k=k%a[j];
                    j++;
                    if(k==1&&j==13&&i==2000){return count;}
                    else if(k==1){count++;}
                }
            }
        }
        return count;
    }
    int febDays(int y)
    {
        if(y%100==0)
        {
            if(y%400==0)
            {return 29;}
            else
            {return 28;}
        }
        else 
        {
            if(y%4==0)
            {return 29;}
            else
            {return 28;}
        }
    }
}
class P020
{
    public static void p020()
    {
        int a[]= new int[1000];int x,t,lim,i,j,sum=0;
        int b[]={0,1};
        int c[]= new int[1000];int d[]= new int[1000];
        a[997]=1;int lc=1000,ld=999;
        int k=1,top=997;
        while((k++)<=99)
        {
            for(i=1;i>=0;i--)
            {
                for(j=999;j>=top;j--)
                {
                    t=a[j]*b[i];
                    if(i==1)
                    {
                        x=(t+c[lc-1]);
                        c[--lc]=x%10;
                        c[lc-1]=x/10;
                    }
                    else
                    {
                        x=(t+d[ld-1]);
                        d[--ld]=x%10;
                        d[ld-1]=x/10;

                    }
                }
            }
            lim=(lc<ld)?lc:ld;
            a[999]=0;
            for(top=999;top>=(lim-1);top--)
            {
                x=a[top]+c[top]+d[top];
                a[top]=x%10;
                a[top-1]=x/10;
            }
            top--;if(a[top]==0){top++;}
            c[999]=d[998]=0;
            lc=1000;ld=999;
            b[1]++;if(b[1]==10){b[1]=0;b[0]++;}
        }
        for(i=999;i>=top;i--)
        {sum=sum+a[i];}
        System.out.println("The sum of digits in 100! is: "+sum);
    }
}
class P021
{
    public static void p021()
    {
        int sumAmicable = 0;
        int factorsi, factorsj;
        for (int i = 2; i < 10000; i++) {
            factorsi = new P021().sumOfFactors(i);
            if (factorsi > i && factorsi <= 10000) {
                factorsj =  new P021().sumOfFactors(factorsi);
                if (factorsj == i) {
                    sumAmicable += i + factorsi;
                }
            }
        }
        System.out.println("The sum of all the amicable numbers under 10000 is: "+sumAmicable);
    }
    int sumOfFactors(int number)
    {
        int sqrtOfNumber = (int)Math.sqrt(number);
        int sum = 1;
        //If the number is a perfect square count the squareroot once in the sum of factors 
        //This function uses a mathematical procedure to determine sum of proper factors which saves time resourses substantially
        if (number == sqrtOfNumber * sqrtOfNumber) 
        {
            sum += sqrtOfNumber;
            sqrtOfNumber--;
        }
        for (int i = 2; i <= sqrtOfNumber; i++)
        {
            if (number % i == 0) 
            {
                sum = sum + i + (number / i);
            }
        }
        return sum;
    }
}
class P022
{
    public static void p022() 
    {
        P022 ob=new P022();
        ob.sort();
        int sum=ob.totalNameSc();
        System.out.println("The total of all the name scores of given names is: "+sum);
    }
    int totalNameSc()
    {
        int sum = 0;
        for (int i = 0; i < names.length; i++)
        {
            int value = 0;
            for (int j = 0; j < names[i].length(); j++)
                {value += names[i].charAt(j) - 'A' + 1;}
            sum += value * (i + 1);
        }
        return sum;
    }
    void sort()
    {   int minp=0; String small="";
        for(int i=0;i<names.length-1;i++)
        {
            minp=i;small=names[i];
            for(int j=i+1;j<names.length;j++)
            {
                if((small.compareTo(names[j])>0))
                { minp=j;small=names[j];}
            }
            String t=names[minp];
            names[minp]=names[i];
            names[i]=t;
        }
    }
    String names[]={"MARY","PATRICIA","LINDA","BARBARA","ELIZABETH","JENNIFER","MARIA","SUSAN","MARGARET","DOROTHY","LISA","NANCY","KAREN","BETTY","HELEN","SANDRA","DONNA","CAROL","RUTH","SHARON","MICHELLE","LAURA","SARAH","KIMBERLY","DEBORAH","JESSICA","SHIRLEY","CYNTHIA","ANGELA","MELISSA","BRENDA","AMY","ANNA","REBECCA","VIRGINIA","KATHLEEN","PAMELA","MARTHA","DEBRA","AMANDA","STEPHANIE","CAROLYN","CHRISTINE","MARIE","JANET","CATHERINE","FRANCES","ANN","JOYCE","DIANE","ALICE","JULIE","HEATHER","TERESA","DORIS","GLORIA","EVELYN","JEAN","CHERYL","MILDRED","KATHERINE","JOAN","ASHLEY","JUDITH","ROSE","JANICE","KELLY","NICOLE","JUDY","CHRISTINA","KATHY","THERESA","BEVERLY","DENISE","TAMMY","IRENE","JANE","LORI","RACHEL","MARILYN","ANDREA","KATHRYN","LOUISE","SARA","ANNE","JACQUELINE","WANDA","BONNIE","JULIA","RUBY","LOIS","TINA","PHYLLIS","NORMA","PAULA","DIANA","ANNIE","LILLIAN","EMILY","ROBIN","PEGGY","CRYSTAL","GLADYS","RITA","DAWN","CONNIE","FLORENCE","TRACY","EDNA","TIFFANY","CARMEN","ROSA","CINDY","GRACE","WENDY","VICTORIA","EDITH","KIM","SHERRY","SYLVIA","JOSEPHINE","THELMA","SHANNON","SHEILA","ETHEL","ELLEN","ELAINE","MARJORIE","CARRIE","CHARLOTTE","MONICA","ESTHER","PAULINE","EMMA","JUANITA","ANITA","RHONDA","HAZEL","AMBER","EVA","DEBBIE","APRIL","LESLIE","CLARA","LUCILLE","JAMIE","JOANNE","ELEANOR","VALERIE","DANIELLE","MEGAN","ALICIA","SUZANNE","MICHELE","GAIL","BERTHA","DARLENE","VERONICA","JILL","ERIN","GERALDINE","LAUREN","CATHY","JOANN","LORRAINE","LYNN","SALLY","REGINA","ERICA","BEATRICE","DOLORES","BERNICE","AUDREY","YVONNE","ANNETTE","JUNE","SAMANTHA","MARION","DANA","STACY","ANA","RENEE","IDA","VIVIAN","ROBERTA","HOLLY","BRITTANY","MELANIE","LORETTA","YOLANDA","JEANETTE","LAURIE","KATIE","KRISTEN","VANESSA","ALMA","SUE","ELSIE","BETH","JEANNE","VICKI","CARLA","TARA","ROSEMARY","EILEEN","TERRI","GERTRUDE","LUCY","TONYA","ELLA","STACEY","WILMA","GINA","KRISTIN","JESSIE","NATALIE","AGNES","VERA","WILLIE","CHARLENE","BESSIE","DELORES","MELINDA","PEARL","ARLENE","MAUREEN","COLLEEN","ALLISON","TAMARA","JOY","GEORGIA","CONSTANCE","LILLIE","CLAUDIA","JACKIE","MARCIA","TANYA","NELLIE","MINNIE","MARLENE","HEIDI","GLENDA","LYDIA","VIOLA","COURTNEY","MARIAN","STELLA","CAROLINE","DORA","JO","VICKIE","MATTIE","TERRY","MAXINE","IRMA","MABEL","MARSHA","MYRTLE","LENA","CHRISTY","DEANNA","PATSY","HILDA","GWENDOLYN","JENNIE","NORA","MARGIE","NINA","CASSANDRA","LEAH","PENNY","KAY","PRISCILLA","NAOMI","CAROLE","BRANDY","OLGA","BILLIE","DIANNE","TRACEY","LEONA","JENNY","FELICIA","SONIA","MIRIAM","VELMA","BECKY","BOBBIE","VIOLET","KRISTINA","TONI","MISTY","MAE","SHELLY","DAISY","RAMONA","SHERRI","ERIKA","KATRINA","CLAIRE","LINDSEY","LINDSAY","GENEVA","GUADALUPE","BELINDA","MARGARITA","SHERYL","CORA","FAYE","ADA","NATASHA","SABRINA","ISABEL","MARGUERITE","HATTIE","HARRIET","MOLLY","CECILIA","KRISTI","BRANDI","BLANCHE","SANDY","ROSIE","JOANNA","IRIS","EUNICE","ANGIE","INEZ","LYNDA","MADELINE","AMELIA","ALBERTA","GENEVIEVE","MONIQUE","JODI","JANIE","MAGGIE","KAYLA","SONYA","JAN","LEE","KRISTINE","CANDACE","FANNIE","MARYANN","OPAL","ALISON","YVETTE","MELODY","LUZ","SUSIE","OLIVIA","FLORA","SHELLEY","KRISTY","MAMIE","LULA","LOLA","VERNA","BEULAH","ANTOINETTE","CANDICE","JUANA","JEANNETTE","PAM","KELLI","HANNAH","WHITNEY","BRIDGET","KARLA","CELIA","LATOYA","PATTY","SHELIA","GAYLE","DELLA","VICKY","LYNNE","SHERI","MARIANNE","KARA","JACQUELYN","ERMA","BLANCA","MYRA","LETICIA","PAT","KRISTA","ROXANNE","ANGELICA","JOHNNIE","ROBYN","FRANCIS","ADRIENNE","ROSALIE","ALEXANDRA","BROOKE","BETHANY","SADIE","BERNADETTE","TRACI","JODY","KENDRA","JASMINE","NICHOLE","RACHAEL","CHELSEA","MABLE","ERNESTINE","MURIEL","MARCELLA","ELENA","KRYSTAL","ANGELINA","NADINE","KARI","ESTELLE","DIANNA","PAULETTE","LORA","MONA","DOREEN","ROSEMARIE","ANGEL","DESIREE","ANTONIA","HOPE","GINGER","JANIS","BETSY","CHRISTIE","FREDA","MERCEDES","MEREDITH","LYNETTE","TERI","CRISTINA","EULA","LEIGH","MEGHAN","SOPHIA","ELOISE","ROCHELLE","GRETCHEN","CECELIA","RAQUEL","HENRIETTA","ALYSSA","JANA","KELLEY","GWEN","KERRY","JENNA","TRICIA","LAVERNE","OLIVE","ALEXIS","TASHA","SILVIA","ELVIRA","CASEY","DELIA","SOPHIE","KATE","PATTI","LORENA","KELLIE","SONJA","LILA","LANA","DARLA","MAY","MINDY","ESSIE","MANDY","LORENE","ELSA","JOSEFINA","JEANNIE","MIRANDA","DIXIE","LUCIA","MARTA","FAITH","LELA","JOHANNA","SHARI","CAMILLE","TAMI","SHAWNA","ELISA","EBONY","MELBA","ORA","NETTIE","TABITHA","OLLIE","JAIME","WINIFRED","KRISTIE","MARINA","ALISHA","AIMEE","RENA","MYRNA","MARLA","TAMMIE","LATASHA","BONITA","PATRICE","RONDA","SHERRIE","ADDIE","FRANCINE","DELORIS","STACIE","ADRIANA","CHERI","SHELBY","ABIGAIL","CELESTE","JEWEL","CARA","ADELE","REBEKAH","LUCINDA","DORTHY","CHRIS","EFFIE","TRINA","REBA","SHAWN","SALLIE","AURORA","LENORA","ETTA","LOTTIE","KERRI","TRISHA","NIKKI","ESTELLA","FRANCISCA","JOSIE","TRACIE","MARISSA","KARIN","BRITTNEY","JANELLE","LOURDES","LAUREL","HELENE","FERN","ELVA","CORINNE","KELSEY","INA","BETTIE","ELISABETH","AIDA","CAITLIN","INGRID","IVA","EUGENIA","CHRISTA","GOLDIE","CASSIE","MAUDE","JENIFER","THERESE","FRANKIE","DENA","LORNA","JANETTE","LATONYA","CANDY","MORGAN","CONSUELO","TAMIKA","ROSETTA","DEBORA","CHERIE","POLLY","DINA","JEWELL","FAY","JILLIAN","DOROTHEA","NELL","TRUDY","ESPERANZA","PATRICA","KIMBERLEY","SHANNA","HELENA","CAROLINA","CLEO","STEFANIE","ROSARIO","OLA","JANINE","MOLLIE","LUPE","ALISA","LOU","MARIBEL","SUSANNE","BETTE","SUSANA","ELISE","CECILE","ISABELLE","LESLEY","JOCELYN","PAIGE","JONI","RACHELLE","LEOLA","DAPHNE","ALTA","ESTER","PETRA","GRACIELA","IMOGENE","JOLENE","KEISHA","LACEY","GLENNA","GABRIELA","KERI","URSULA","LIZZIE","KIRSTEN","SHANA","ADELINE","MAYRA","JAYNE","JACLYN","GRACIE","SONDRA","CARMELA","MARISA","ROSALIND","CHARITY","TONIA","BEATRIZ","MARISOL","CLARICE","JEANINE","SHEENA","ANGELINE","FRIEDA","LILY","ROBBIE","SHAUNA","MILLIE","CLAUDETTE","CATHLEEN","ANGELIA","GABRIELLE","AUTUMN","KATHARINE","SUMMER","JODIE","STACI","LEA","CHRISTI","JIMMIE","JUSTINE","ELMA","LUELLA","MARGRET","DOMINIQUE","SOCORRO","RENE","MARTINA","MARGO","MAVIS","CALLIE","BOBBI","MARITZA","LUCILE","LEANNE","JEANNINE","DEANA","AILEEN","LORIE","LADONNA","WILLA","MANUELA","GALE","SELMA","DOLLY","SYBIL","ABBY","LARA","DALE","IVY","DEE","WINNIE","MARCY","LUISA","JERI","MAGDALENA","OFELIA","MEAGAN","AUDRA","MATILDA","LEILA","CORNELIA","BIANCA","SIMONE","BETTYE","RANDI","VIRGIE","LATISHA","BARBRA","GEORGINA","ELIZA","LEANN","BRIDGETTE","RHODA","HALEY","ADELA","NOLA","BERNADINE","FLOSSIE","ILA","GRETA","RUTHIE","NELDA","MINERVA","LILLY","TERRIE","LETHA","HILARY","ESTELA","VALARIE","BRIANNA","ROSALYN","EARLINE","CATALINA","AVA","MIA","CLARISSA","LIDIA","CORRINE","ALEXANDRIA","CONCEPCION","TIA","SHARRON","RAE","DONA","ERICKA","JAMI","ELNORA","CHANDRA","LENORE","NEVA","MARYLOU","MELISA","TABATHA","SERENA","AVIS","ALLIE","SOFIA","JEANIE","ODESSA","NANNIE","HARRIETT","LORAINE","PENELOPE","MILAGROS","EMILIA","BENITA","ALLYSON","ASHLEE","TANIA","TOMMIE","ESMERALDA","KARINA","EVE","PEARLIE","ZELMA","MALINDA","NOREEN","TAMEKA","SAUNDRA","HILLARY","AMIE","ALTHEA","ROSALINDA","JORDAN","LILIA","ALANA","GAY","CLARE","ALEJANDRA","ELINOR","MICHAEL","LORRIE","JERRI","DARCY","EARNESTINE","CARMELLA","TAYLOR","NOEMI","MARCIE","LIZA","ANNABELLE","LOUISA","EARLENE","MALLORY","CARLENE","NITA","SELENA","TANISHA","KATY","JULIANNE","JOHN","LAKISHA","EDWINA","MARICELA","MARGERY","KENYA","DOLLIE","ROXIE","ROSLYN","KATHRINE","NANETTE","CHARMAINE","LAVONNE","ILENE","KRIS","TAMMI","SUZETTE","CORINE","KAYE","JERRY","MERLE","CHRYSTAL","LINA","DEANNE","LILIAN","JULIANA","ALINE","LUANN","KASEY","MARYANNE","EVANGELINE","COLETTE","MELVA","LAWANDA","YESENIA","NADIA","MADGE","KATHIE","EDDIE","OPHELIA","VALERIA","NONA","MITZI","MARI","GEORGETTE","CLAUDINE","FRAN","ALISSA","ROSEANN","LAKEISHA","SUSANNA","REVA","DEIDRE","CHASITY","SHEREE","CARLY","JAMES","ELVIA","ALYCE","DEIRDRE","GENA","BRIANA","ARACELI","KATELYN","ROSANNE","WENDI","TESSA","BERTA","MARVA","IMELDA","MARIETTA","MARCI","LEONOR","ARLINE","SASHA","MADELYN","JANNA","JULIETTE","DEENA","AURELIA","JOSEFA","AUGUSTA","LILIANA","YOUNG","CHRISTIAN","LESSIE","AMALIA","SAVANNAH","ANASTASIA","VILMA","NATALIA","ROSELLA","LYNNETTE","CORINA","ALFREDA","LEANNA","CAREY","AMPARO","COLEEN","TAMRA","AISHA","WILDA","KARYN","CHERRY","QUEEN","MAURA","MAI","EVANGELINA","ROSANNA","HALLIE","ERNA","ENID","MARIANA","LACY","JULIET","JACKLYN","FREIDA","MADELEINE","MARA","HESTER","CATHRYN","LELIA","CASANDRA","BRIDGETT","ANGELITA","JANNIE","DIONNE","ANNMARIE","KATINA","BERYL","PHOEBE","MILLICENT","KATHERYN","DIANN","CARISSA","MARYELLEN","LIZ","LAURI","HELGA","GILDA","ADRIAN","RHEA","MARQUITA","HOLLIE","TISHA","TAMERA","ANGELIQUE","FRANCESCA","BRITNEY","KAITLIN","LOLITA","FLORINE","ROWENA","REYNA","TWILA","FANNY","JANELL","INES","CONCETTA","BERTIE","ALBA","BRIGITTE","ALYSON","VONDA","PANSY","ELBA","NOELLE","LETITIA","KITTY","DEANN","BRANDIE","LOUELLA","LETA","FELECIA","SHARLENE","LESA","BEVERLEY","ROBERT","ISABELLA","HERMINIA","TERRA","CELINA","TORI","OCTAVIA","JADE","DENICE","GERMAINE","SIERRA","MICHELL","CORTNEY","NELLY","DORETHA","SYDNEY","DEIDRA","MONIKA","LASHONDA","JUDI","CHELSEY","ANTIONETTE","MARGOT","BOBBY","ADELAIDE","NAN","LEEANN","ELISHA","DESSIE","LIBBY","KATHI","GAYLA","LATANYA","MINA","MELLISA","KIMBERLEE","JASMIN","RENAE","ZELDA","ELDA","MA","JUSTINA","GUSSIE","EMILIE","CAMILLA","ABBIE","ROCIO","KAITLYN","JESSE","EDYTHE","ASHLEIGH","SELINA","LAKESHA","GERI","ALLENE","PAMALA","MICHAELA","DAYNA","CARYN","ROSALIA","SUN","JACQULINE","REBECA","MARYBETH","KRYSTLE","IOLA","DOTTIE","BENNIE","BELLE","AUBREY","GRISELDA","ERNESTINA","ELIDA","ADRIANNE","DEMETRIA","DELMA","CHONG","JAQUELINE","DESTINY","ARLEEN","VIRGINA","RETHA","FATIMA","TILLIE","ELEANORE","CARI","TREVA","BIRDIE","WILHELMINA","ROSALEE","MAURINE","LATRICE","YONG","JENA","TARYN","ELIA","DEBBY","MAUDIE","JEANNA","DELILAH","CATRINA","SHONDA","HORTENCIA","THEODORA","TERESITA","ROBBIN","DANETTE","MARYJANE","FREDDIE","DELPHINE","BRIANNE","NILDA","DANNA","CINDI","BESS","IONA","HANNA","ARIEL","WINONA","VIDA","ROSITA","MARIANNA","WILLIAM","RACHEAL","GUILLERMINA","ELOISA","CELESTINE","CAREN","MALISSA","LONA","CHANTEL","SHELLIE","MARISELA","LEORA","AGATHA","SOLEDAD","MIGDALIA","IVETTE","CHRISTEN","ATHENA","JANEL","CHLOE","VEDA","PATTIE","TESSIE","TERA","MARILYNN","LUCRETIA","KARRIE","DINAH","DANIELA","ALECIA","ADELINA","VERNICE","SHIELA","PORTIA","MERRY","LASHAWN","DEVON","DARA","TAWANA","OMA","VERDA","CHRISTIN","ALENE","ZELLA","SANDI","RAFAELA","MAYA","KIRA","CANDIDA","ALVINA","SUZAN","SHAYLA","LYN","LETTIE","ALVA","SAMATHA","ORALIA","MATILDE","MADONNA","LARISSA","VESTA","RENITA","INDIA","DELOIS","SHANDA","PHILLIS","LORRI","ERLINDA","CRUZ","CATHRINE","BARB","ZOE","ISABELL","IONE","GISELA","CHARLIE","VALENCIA","ROXANNA","MAYME","KISHA","ELLIE","MELLISSA","DORRIS","DALIA","BELLA","ANNETTA","ZOILA","RETA","REINA","LAURETTA","KYLIE","CHRISTAL","PILAR","CHARLA","ELISSA","TIFFANI","TANA","PAULINA","LEOTA","BREANNA","JAYME","CARMEL","VERNELL","TOMASA","MANDI","DOMINGA","SANTA","MELODIE","LURA","ALEXA","TAMELA","RYAN","MIRNA","KERRIE","VENUS","NOEL","FELICITA","CRISTY","CARMELITA","BERNIECE","ANNEMARIE","TIARA","ROSEANNE","MISSY","CORI","ROXANA","PRICILLA","KRISTAL","JUNG","ELYSE","HAYDEE","ALETHA","BETTINA","MARGE","GILLIAN","FILOMENA","CHARLES","ZENAIDA","HARRIETTE","CARIDAD","VADA","UNA","ARETHA","PEARLINE","MARJORY","MARCELA","FLOR","EVETTE","ELOUISE","ALINA","TRINIDAD","DAVID","DAMARIS","CATHARINE","CARROLL","BELVA","NAKIA","MARLENA","LUANNE","LORINE","KARON","DORENE","DANITA","BRENNA","TATIANA","SAMMIE","LOUANN","LOREN","JULIANNA","ANDRIA","PHILOMENA","LUCILA","LEONORA","DOVIE","ROMONA","MIMI","JACQUELIN","GAYE","TONJA","MISTI","JOE","GENE","CHASTITY","STACIA","ROXANN","MICAELA","NIKITA","MEI","VELDA","MARLYS","JOHNNA","AURA","LAVERN","IVONNE","HAYLEY","NICKI","MAJORIE","HERLINDA","GEORGE","ALPHA","YADIRA","PERLA","GREGORIA","DANIEL","ANTONETTE","SHELLI","MOZELLE","MARIAH","JOELLE","CORDELIA","JOSETTE","CHIQUITA","TRISTA","LOUIS","LAQUITA","GEORGIANA","CANDI","SHANON","LONNIE","HILDEGARD","CECIL","VALENTINA","STEPHANY","MAGDA","KAROL","GERRY","GABRIELLA","TIANA","ROMA","RICHELLE","RAY","PRINCESS","OLETA","JACQUE","IDELLA","ALAINA","SUZANNA","JOVITA","BLAIR","TOSHA","RAVEN","NEREIDA","MARLYN","KYLA","JOSEPH","DELFINA","TENA","STEPHENIE","SABINA","NATHALIE","MARCELLE","GERTIE","DARLEEN","THEA","SHARONDA","SHANTEL","BELEN","VENESSA","ROSALINA","ONA","GENOVEVA","COREY","CLEMENTINE","ROSALBA","RENATE","RENATA","MI","IVORY","GEORGIANNA","FLOY","DORCAS","ARIANA","TYRA","THEDA","MARIAM","JULI","JESICA","DONNIE","VIKKI","VERLA","ROSELYN","MELVINA","JANNETTE","GINNY","DEBRAH","CORRIE","ASIA","VIOLETA","MYRTIS","LATRICIA","COLLETTE","CHARLEEN","ANISSA","VIVIANA","TWYLA","PRECIOUS","NEDRA","LATONIA","LAN","HELLEN","FABIOLA","ANNAMARIE","ADELL","SHARYN","CHANTAL","NIKI","MAUD","LIZETTE","LINDY","KIA","KESHA","JEANA","DANELLE","CHARLINE","CHANEL","CARROL","VALORIE","LIA","DORTHA","CRISTAL","SUNNY","LEONE","LEILANI","GERRI","DEBI","ANDRA","KESHIA","IMA","EULALIA","EASTER","DULCE","NATIVIDAD","LINNIE","KAMI","GEORGIE","CATINA","BROOK","ALDA","WINNIFRED","SHARLA","RUTHANN","MEAGHAN","MAGDALENE","LISSETTE","ADELAIDA","VENITA","TRENA","SHIRLENE","SHAMEKA","ELIZEBETH","DIAN","SHANTA","MICKEY","LATOSHA","CARLOTTA","WINDY","SOON","ROSINA","MARIANN","LEISA","JONNIE","DAWNA","CATHIE","BILLY","ASTRID","SIDNEY","LAUREEN","JANEEN","HOLLI","FAWN","VICKEY","TERESSA","SHANTE","RUBYE","MARCELINA","CHANDA","CARY","TERESE","SCARLETT","MARTY","MARNIE","LULU","LISETTE","JENIFFER","ELENOR","DORINDA","DONITA","CARMAN","BERNITA","ALTAGRACIA","ALETA","ADRIANNA","ZORAIDA","RONNIE","NICOLA","LYNDSEY","KENDALL","JANINA","CHRISSY","AMI","STARLA","PHYLIS","PHUONG","KYRA","CHARISSE","BLANCH","SANJUANITA","RONA","NANCI","MARILEE","MARANDA","CORY","BRIGETTE","SANJUANA","MARITA","KASSANDRA","JOYCELYN","IRA","FELIPA","CHELSIE","BONNY","MIREYA","LORENZA","KYONG","ILEANA","CANDELARIA","TONY","TOBY","SHERIE","OK","MARK","LUCIE","LEATRICE","LAKESHIA","GERDA","EDIE","BAMBI","MARYLIN","LAVON","HORTENSE","GARNET","EVIE","TRESSA","SHAYNA","LAVINA","KYUNG","JEANETTA","SHERRILL","SHARA","PHYLISS","MITTIE","ANABEL","ALESIA","THUY","TAWANDA","RICHARD","JOANIE","TIFFANIE","LASHANDA","KARISSA","ENRIQUETA","DARIA","DANIELLA","CORINNA","ALANNA","ABBEY","ROXANE","ROSEANNA","MAGNOLIA","LIDA","KYLE","JOELLEN","ERA","CORAL","CARLEEN","TRESA","PEGGIE","NOVELLA","NILA","MAYBELLE","JENELLE","CARINA","NOVA","MELINA","MARQUERITE","MARGARETTE","JOSEPHINA","EVONNE","DEVIN","CINTHIA","ALBINA","TOYA","TAWNYA","SHERITA","SANTOS","MYRIAM","LIZABETH","LISE","KEELY","JENNI","GISELLE","CHERYLE","ARDITH","ARDIS","ALESHA","ADRIANE","SHAINA","LINNEA","KAROLYN","HONG","FLORIDA","FELISHA","DORI","DARCI","ARTIE","ARMIDA","ZOLA","XIOMARA","VERGIE","SHAMIKA","NENA","NANNETTE","MAXIE","LOVIE","JEANE","JAIMIE","INGE","FARRAH","ELAINA","CAITLYN","STARR","FELICITAS","CHERLY","CARYL","YOLONDA","YASMIN","TEENA","PRUDENCE","PENNIE","NYDIA","MACKENZIE","ORPHA","MARVEL","LIZBETH","LAURETTE","JERRIE","HERMELINDA","CAROLEE","TIERRA","MIRIAN","META","MELONY","KORI","JENNETTE","JAMILA","ENA","ANH","YOSHIKO","SUSANNAH","SALINA","RHIANNON","JOLEEN","CRISTINE","ASHTON","ARACELY","TOMEKA","SHALONDA","MARTI","LACIE","KALA","JADA","ILSE","HAILEY","BRITTANI","ZONA","SYBLE","SHERRYL","RANDY","NIDIA","MARLO","KANDICE","KANDI","DEB","DEAN","AMERICA","ALYCIA","TOMMY","RONNA","NORENE","MERCY","JOSE","INGEBORG","GIOVANNA","GEMMA","CHRISTEL","AUDRY","ZORA","VITA","VAN","TRISH","STEPHAINE","SHIRLEE","SHANIKA","MELONIE","MAZIE","JAZMIN","INGA","HOA","HETTIE","GERALYN","FONDA","ESTRELLA","ADELLA","SU","SARITA","RINA","MILISSA","MARIBETH","GOLDA","EVON","ETHELYN","ENEDINA","CHERISE","CHANA","VELVA","TAWANNA","SADE","MIRTA","LI","KARIE","JACINTA","ELNA","DAVINA","CIERRA","ASHLIE","ALBERTHA","TANESHA","STEPHANI","NELLE","MINDI","LU","LORINDA","LARUE","FLORENE","DEMETRA","DEDRA","CIARA","CHANTELLE","ASHLY","SUZY","ROSALVA","NOELIA","LYDA","LEATHA","KRYSTYNA","KRISTAN","KARRI","DARLINE","DARCIE","CINDA","CHEYENNE","CHERRIE","AWILDA","ALMEDA","ROLANDA","LANETTE","JERILYN","GISELE","EVALYN","CYNDI","CLETA","CARIN","ZINA","ZENA","VELIA","TANIKA","PAUL","CHARISSA","THOMAS","TALIA","MARGARETE","LAVONDA","KAYLEE","KATHLENE","JONNA","IRENA","ILONA","IDALIA","CANDIS","CANDANCE","BRANDEE","ANITRA","ALIDA","SIGRID","NICOLETTE","MARYJO","LINETTE","HEDWIG","CHRISTIANA","CASSIDY","ALEXIA","TRESSIE","MODESTA","LUPITA","LITA","GLADIS","EVELIA","DAVIDA","CHERRI","CECILY","ASHELY","ANNABEL","AGUSTINA","WANITA","SHIRLY","ROSAURA","HULDA","EUN","BAILEY","YETTA","VERONA","THOMASINA","SIBYL","SHANNAN","MECHELLE","LUE","LEANDRA","LANI","KYLEE","KANDY","JOLYNN","FERNE","EBONI","CORENE","ALYSIA","ZULA","NADA","MOIRA","LYNDSAY","LORRETTA","JUAN","JAMMIE","HORTENSIA","GAYNELL","CAMERON","ADRIA","VINA","VICENTA","TANGELA","STEPHINE","NORINE","NELLA","LIANA","LESLEE","KIMBERELY","ILIANA","GLORY","FELICA","EMOGENE","ELFRIEDE","EDEN","EARTHA","CARMA","BEA","OCIE","MARRY","LENNIE","KIARA","JACALYN","CARLOTA","ARIELLE","YU","STAR","OTILIA","KIRSTIN","KACEY","JOHNETTA","JOEY","JOETTA","JERALDINE","JAUNITA","ELANA","DORTHEA","CAMI","AMADA","ADELIA","VERNITA","TAMAR","SIOBHAN","RENEA","RASHIDA","OUIDA","ODELL","NILSA","MERYL","KRISTYN","JULIETA","DANICA","BREANNE","AUREA","ANGLEA","SHERRON","ODETTE","MALIA","LORELEI","LIN","LEESA","KENNA","KATHLYN","FIONA","CHARLETTE","SUZIE","SHANTELL","SABRA","RACQUEL","MYONG","MIRA","MARTINE","LUCIENNE","LAVADA","JULIANN","JOHNIE","ELVERA","DELPHIA","CLAIR","CHRISTIANE","CHAROLETTE","CARRI","AUGUSTINE","ASHA","ANGELLA","PAOLA","NINFA","LEDA","LAI","EDA","SUNSHINE","STEFANI","SHANELL","PALMA","MACHELLE","LISSA","KECIA","KATHRYNE","KARLENE","JULISSA","JETTIE","JENNIFFER","HUI","CORRINA","CHRISTOPHER","CAROLANN","ALENA","TESS","ROSARIA","MYRTICE","MARYLEE","LIANE","KENYATTA","JUDIE","JANEY","IN","ELMIRA","ELDORA","DENNA","CRISTI","CATHI","ZAIDA","VONNIE","VIVA","VERNIE","ROSALINE","MARIELA","LUCIANA","LESLI","KARAN","FELICE","DENEEN","ADINA","WYNONA","TARSHA","SHERON","SHASTA","SHANITA","SHANI","SHANDRA","RANDA","PINKIE","PARIS","NELIDA","MARILOU","LYLA","LAURENE","LACI","JOI","JANENE","DOROTHA","DANIELE","DANI","CAROLYNN","CARLYN","BERENICE","AYESHA","ANNELIESE","ALETHEA","THERSA","TAMIKO","RUFINA","OLIVA","MOZELL","MARYLYN","MADISON","KRISTIAN","KATHYRN","KASANDRA","KANDACE","JANAE","GABRIEL","DOMENICA","DEBBRA","DANNIELLE","CHUN","BUFFY","BARBIE","ARCELIA","AJA","ZENOBIA","SHAREN","SHAREE","PATRICK","PAGE","MY","LAVINIA","KUM","KACIE","JACKELINE","HUONG","FELISA","EMELIA","ELEANORA","CYTHIA","CRISTIN","CLYDE","CLARIBEL","CARON","ANASTACIA","ZULMA","ZANDRA","YOKO","TENISHA","SUSANN","SHERILYN","SHAY","SHAWANDA","SABINE","ROMANA","MATHILDA","LINSEY","KEIKO","JOANA","ISELA","GRETTA","GEORGETTA","EUGENIE","DUSTY","DESIRAE","DELORA","CORAZON","ANTONINA","ANIKA","WILLENE","TRACEE","TAMATHA","REGAN","NICHELLE","MICKIE","MAEGAN","LUANA","LANITA","KELSIE","EDELMIRA","BREE","AFTON","TEODORA","TAMIE","SHENA","MEG","LINH","KELI","KACI","DANYELLE","BRITT","ARLETTE","ALBERTINE","ADELLE","TIFFINY","STORMY","SIMONA","NUMBERS","NICOLASA","NICHOL","NIA","NAKISHA","MEE","MAIRA","LOREEN","KIZZY","JOHNNY","JAY","FALLON","CHRISTENE","BOBBYE","ANTHONY","YING","VINCENZA","TANJA","RUBIE","RONI","QUEENIE","MARGARETT","KIMBERLI","IRMGARD","IDELL","HILMA","EVELINA","ESTA","EMILEE","DENNISE","DANIA","CARL","CARIE","ANTONIO","WAI","SANG","RISA","RIKKI","PARTICIA","MUI","MASAKO","MARIO","LUVENIA","LOREE","LONI","LIEN","KEVIN","GIGI","FLORENCIA","DORIAN","DENITA","DALLAS","CHI","BILLYE","ALEXANDER","TOMIKA","SHARITA","RANA","NIKOLE","NEOMA","MARGARITE","MADALYN","LUCINA","LAILA","KALI","JENETTE","GABRIELE","EVELYNE","ELENORA","CLEMENTINA","ALEJANDRINA","ZULEMA","VIOLETTE","VANNESSA","THRESA","RETTA","PIA","PATIENCE","NOELLA","NICKIE","JONELL","DELTA","CHUNG","CHAYA","CAMELIA","BETHEL","ANYA","ANDREW","THANH","SUZANN","SPRING","SHU","MILA","LILLA","LAVERNA","KEESHA","KATTIE","GIA","GEORGENE","EVELINE","ESTELL","ELIZBETH","VIVIENNE","VALLIE","TRUDIE","STEPHANE","MICHEL","MAGALY","MADIE","KENYETTA","KARREN","JANETTA","HERMINE","HARMONY","DRUCILLA","DEBBI","CELESTINA","CANDIE","BRITNI","BECKIE","AMINA","ZITA","YUN","YOLANDE","VIVIEN","VERNETTA","TRUDI","SOMMER","PEARLE","PATRINA","OSSIE","NICOLLE","LOYCE","LETTY","LARISA","KATHARINA","JOSELYN","JONELLE","JENELL","IESHA","HEIDE","FLORINDA","FLORENTINA","FLO","ELODIA","DORINE","BRUNILDA","BRIGID","ASHLI","ARDELLA","TWANA","THU","TARAH","SUNG","SHEA","SHAVON","SHANE","SERINA","RAYNA","RAMONITA","NGA","MARGURITE","LUCRECIA","KOURTNEY","KATI","JESUS","JESENIA","DIAMOND","CRISTA","AYANA","ALICA","ALIA","VINNIE","SUELLEN","ROMELIA","RACHELL","PIPER","OLYMPIA","MICHIKO","KATHALEEN","JOLIE","JESSI","JANESSA","HANA","HA","ELEASE","CARLETTA","BRITANY","SHONA","SALOME","ROSAMOND","REGENA","RAINA","NGOC","NELIA","LOUVENIA","LESIA","LATRINA","LATICIA","LARHONDA","JINA","JACKI","HOLLIS","HOLLEY","EMMY","DEEANN","CORETTA","ARNETTA","VELVET","THALIA","SHANICE","NETA","MIKKI","MICKI","LONNA","LEANA","LASHUNDA","KILEY","JOYE","JACQULYN","IGNACIA","HYUN","HIROKO","HENRY","HENRIETTE","ELAYNE","DELINDA","DARNELL","DAHLIA","COREEN","CONSUELA","CONCHITA","CELINE","BABETTE","AYANNA","ANETTE","ALBERTINA","SKYE","SHAWNEE","SHANEKA","QUIANA","PAMELIA","MIN","MERRI","MERLENE","MARGIT","KIESHA","KIERA","KAYLENE","JODEE","JENISE","ERLENE","EMMIE","ELSE","DARYL","DALILA","DAISEY","CODY","CASIE","BELIA","BABARA","VERSIE","VANESA","SHELBA","SHAWNDA","SAM","NORMAN","NIKIA","NAOMA","MARNA","MARGERET","MADALINE","LAWANA","KINDRA","JUTTA","JAZMINE","JANETT","HANNELORE","GLENDORA","GERTRUD","GARNETT","FREEDA","FREDERICA","FLORANCE","FLAVIA","DENNIS","CARLINE","BEVERLEE","ANJANETTE","VALDA","TRINITY","TAMALA","STEVIE","SHONNA","SHA","SARINA","ONEIDA","MICAH","MERILYN","MARLEEN","LURLINE","LENNA","KATHERIN","JIN","JENI","HAE","GRACIA","GLADY","FARAH","ERIC","ENOLA","EMA","DOMINQUE","DEVONA","DELANA","CECILA","CAPRICE","ALYSHA","ALI","ALETHIA","VENA","THERESIA","TAWNY","SONG","SHAKIRA","SAMARA","SACHIKO","RACHELE","PAMELLA","NICKY","MARNI","MARIEL","MAREN","MALISA","LIGIA","LERA","LATORIA","LARAE","KIMBER","KATHERN","KAREY","JENNEFER","JANETH","HALINA","FREDIA","DELISA","DEBROAH","CIERA","CHIN","ANGELIKA","ANDREE","ALTHA","YEN","VIVAN","TERRESA","TANNA","SUK","SUDIE","SOO","SIGNE","SALENA","RONNI","REBBECCA","MYRTIE","MCKENZIE","MALIKA","MAIDA","LOAN","LEONARDA","KAYLEIGH","FRANCE","ETHYL","ELLYN","DAYLE","CAMMIE","BRITTNI","BIRGIT","AVELINA","ASUNCION","ARIANNA","AKIKO","VENICE","TYESHA","TONIE","TIESHA","TAKISHA","STEFFANIE","SINDY","SANTANA","MEGHANN","MANDA","MACIE","LADY","KELLYE","KELLEE","JOSLYN","JASON","INGER","INDIRA","GLINDA","GLENNIS","FERNANDA","FAUSTINA","ENEIDA","ELICIA","DOT","DIGNA","DELL","ARLETTA","ANDRE","WILLIA","TAMMARA","TABETHA","SHERRELL","SARI","REFUGIO","REBBECA","PAULETTA","NIEVES","NATOSHA","NAKITA","MAMMIE","KENISHA","KAZUKO","KASSIE","GARY","EARLEAN","DAPHINE","CORLISS","CLOTILDE","CAROLYNE","BERNETTA","AUGUSTINA","AUDREA","ANNIS","ANNABELL","YAN","TENNILLE","TAMICA","SELENE","SEAN","ROSANA","REGENIA","QIANA","MARKITA","MACY","LEEANNE","LAURINE","KYM","JESSENIA","JANITA","GEORGINE","GENIE","EMIKO","ELVIE","DEANDRA","DAGMAR","CORIE","COLLEN","CHERISH","ROMAINE","PORSHA","PEARLENE","MICHELINE","MERNA","MARGORIE","MARGARETTA","LORE","KENNETH","JENINE","HERMINA","FREDERICKA","ELKE","DRUSILLA","DORATHY","DIONE","DESIRE","CELENA","BRIGIDA","ANGELES","ALLEGRA","THEO","TAMEKIA","SYNTHIA","STEPHEN","SOOK","SLYVIA","ROSANN","REATHA","RAYE","MARQUETTA","MARGART","LING","LAYLA","KYMBERLY","KIANA","KAYLEEN","KATLYN","KARMEN","JOELLA","IRINA","EMELDA","ELENI","DETRA","CLEMMIE","CHERYLL","CHANTELL","CATHEY","ARNITA","ARLA","ANGLE","ANGELIC","ALYSE","ZOFIA","THOMASINE","TENNIE","SON","SHERLY","SHERLEY","SHARYL","REMEDIOS","PETRINA","NICKOLE","MYUNG","MYRLE","MOZELLA","LOUANNE","LISHA","LATIA","LANE","KRYSTA","JULIENNE","JOEL","JEANENE","JACQUALINE","ISAURA","GWENDA","EARLEEN","DONALD","CLEOPATRA","CARLIE","AUDIE","ANTONIETTA","ALISE","ALEX","VERDELL","VAL","TYLER","TOMOKO","THAO","TALISHA","STEVEN","SO","SHEMIKA","SHAUN","SCARLET","SAVANNA","SANTINA","ROSIA","RAEANN","ODILIA","NANA","MINNA","MAGAN","LYNELLE","LE","KARMA","JOEANN","IVANA","INELL","ILANA","HYE","HONEY","HEE","GUDRUN","FRANK","DREAMA","CRISSY","CHANTE","CARMELINA","ARVILLA","ARTHUR","ANNAMAE","ALVERA","ALEIDA","AARON","YEE","YANIRA","VANDA","TIANNA","TAM","STEFANIA","SHIRA","PERRY","NICOL","NANCIE","MONSERRATE","MINH","MELYNDA","MELANY","MATTHEW","LOVELLA","LAURE","KIRBY","KACY","JACQUELYNN","HYON","GERTHA","FRANCISCO","ELIANA","CHRISTENA","CHRISTEEN","CHARISE","CATERINA","CARLEY","CANDYCE","ARLENA","AMMIE","YANG","WILLETTE","VANITA","TUYET","TINY","SYREETA","SILVA","SCOTT","RONALD","PENNEY","NYLA","MICHAL","MAURICE","MARYAM","MARYA","MAGEN","LUDIE","LOMA","LIVIA","LANELL","KIMBERLIE","JULEE","DONETTA","DIEDRA","DENISHA","DEANE","DAWNE","CLARINE","CHERRYL","BRONWYN","BRANDON","ALLA","VALERY","TONDA","SUEANN","SORAYA","SHOSHANA","SHELA","SHARLEEN","SHANELLE","NERISSA","MICHEAL","MERIDITH","MELLIE","MAYE","MAPLE","MAGARET","LUIS","LILI","LEONILA","LEONIE","LEEANNA","LAVONIA","LAVERA","KRISTEL","KATHEY","KATHE","JUSTIN","JULIAN","JIMMY","JANN","ILDA","HILDRED","HILDEGARDE","GENIA","FUMIKO","EVELIN","ERMELINDA","ELLY","DUNG","DOLORIS","DIONNA","DANAE","BERNEICE","ANNICE","ALIX","VERENA","VERDIE","TRISTAN","SHAWNNA","SHAWANA","SHAUNNA","ROZELLA","RANDEE","RANAE","MILAGRO","LYNELL","LUISE","LOUIE","LOIDA","LISBETH","KARLEEN","JUNITA","JONA","ISIS","HYACINTH","HEDY","GWENN","ETHELENE","ERLINE","EDWARD","DONYA","DOMONIQUE","DELICIA","DANNETTE","CICELY","BRANDA","BLYTHE","BETHANN","ASHLYN","ANNALEE","ALLINE","YUKO","VELLA","TRANG","TOWANDA","TESHA","SHERLYN","NARCISA","MIGUELINA","MERI","MAYBELL","MARLANA","MARGUERITA","MADLYN","LUNA","LORY","LORIANN","LIBERTY","LEONORE","LEIGHANN","LAURICE","LATESHA","LARONDA","KATRICE","KASIE","KARL","KALEY","JADWIGA","GLENNIE","GEARLDINE","FRANCINA","EPIFANIA","DYAN","DORIE","DIEDRE","DENESE","DEMETRICE","DELENA","DARBY","CRISTIE","CLEORA","CATARINA","CARISA","BERNIE","BARBERA","ALMETA","TRULA","TEREASA","SOLANGE","SHEILAH","SHAVONNE","SANORA","ROCHELL","MATHILDE","MARGARETA","MAIA","LYNSEY","LAWANNA","LAUNA","KENA","KEENA","KATIA","JAMEY","GLYNDA","GAYLENE","ELVINA","ELANOR","DANUTA","DANIKA","CRISTEN","CORDIE","COLETTA","CLARITA","CARMON","BRYNN","AZUCENA","AUNDREA","ANGELE","YI","WALTER","VERLIE","VERLENE","TAMESHA","SILVANA","SEBRINA","SAMIRA","REDA","RAYLENE","PENNI","PANDORA","NORAH","NOMA","MIREILLE","MELISSIA","MARYALICE","LARAINE","KIMBERY","KARYL","KARINE","KAM","JOLANDA","JOHANA","JESUSA","JALEESA","JAE","JACQUELYNE","IRISH","ILUMINADA","HILARIA","HANH","GENNIE","FRANCIE","FLORETTA","EXIE","EDDA","DREMA","DELPHA","BEV","BARBAR","ASSUNTA","ARDELL","ANNALISA","ALISIA","YUKIKO","YOLANDO","WONDA","WEI","WALTRAUD","VETA","TEQUILA","TEMEKA","TAMEIKA","SHIRLEEN","SHENITA","PIEDAD","OZELLA","MIRTHA","MARILU","KIMIKO","JULIANE","JENICE","JEN","JANAY","JACQUILINE","HILDE","FE","FAE","EVAN","EUGENE","ELOIS","ECHO","DEVORAH","CHAU","BRINDA","BETSEY","ARMINDA","ARACELIS","APRYL","ANNETT","ALISHIA","VEOLA","USHA","TOSHIKO","THEOLA","TASHIA","TALITHA","SHERY","RUDY","RENETTA","REIKO","RASHEEDA","OMEGA","OBDULIA","MIKA","MELAINE","MEGGAN","MARTIN","MARLEN","MARGET","MARCELINE","MANA","MAGDALEN","LIBRADA","LEZLIE","LEXIE","LATASHIA","LASANDRA","KELLE","ISIDRA","ISA","INOCENCIA","GWYN","FRANCOISE","ERMINIA","ERINN","DIMPLE","DEVORA","CRISELDA","ARMANDA","ARIE","ARIANE","ANGELO","ANGELENA","ALLEN","ALIZA","ADRIENE","ADALINE","XOCHITL","TWANNA","TRAN","TOMIKO","TAMISHA","TAISHA","SUSY","SIU","RUTHA","ROXY","RHONA","RAYMOND","OTHA","NORIKO","NATASHIA","MERRIE","MELVIN","MARINDA","MARIKO","MARGERT","LORIS","LIZZETTE","LEISHA","KAILA","KA","JOANNIE","JERRICA","JENE","JANNET","JANEE","JACINDA","HERTA","ELENORE","DORETTA","DELAINE","DANIELL","CLAUDIE","CHINA","BRITTA","APOLONIA","AMBERLY","ALEASE","YURI","YUK","WEN","WANETA","UTE","TOMI","SHARRI","SANDIE","ROSELLE","REYNALDA","RAGUEL","PHYLICIA","PATRIA","OLIMPIA","ODELIA","MITZIE","MITCHELL","MISS","MINDA","MIGNON","MICA","MENDY","MARIVEL","MAILE","LYNETTA","LAVETTE","LAURYN","LATRISHA","LAKIESHA","KIERSTEN","KARY","JOSPHINE","JOLYN","JETTA","JANISE","JACQUIE","IVELISSE","GLYNIS","GIANNA","GAYNELLE","EMERALD","DEMETRIUS","DANYELL","DANILLE","DACIA","CORALEE","CHER","CEOLA","BRETT","BELL","ARIANNE","ALESHIA","YUNG","WILLIEMAE","TROY","TRINH","THORA","TAI","SVETLANA","SHERIKA","SHEMEKA","SHAUNDA","ROSELINE","RICKI","MELDA","MALLIE","LAVONNA","LATINA","LARRY","LAQUANDA","LALA","LACHELLE","KLARA","KANDIS","JOHNA","JEANMARIE","JAYE","HANG","GRAYCE","GERTUDE","EMERITA","EBONIE","CLORINDA","CHING","CHERY","CAROLA","BREANN","BLOSSOM","BERNARDINE","BECKI","ARLETHA","ARGELIA","ARA","ALITA","YULANDA","YON","YESSENIA","TOBI","TASIA","SYLVIE","SHIRL","SHIRELY","SHERIDAN","SHELLA","SHANTELLE","SACHA","ROYCE","REBECKA","REAGAN","PROVIDENCIA","PAULENE","MISHA","MIKI","MARLINE","MARICA","LORITA","LATOYIA","LASONYA","KERSTIN","KENDA","KEITHA","KATHRIN","JAYMIE","JACK","GRICELDA","GINETTE","ERYN","ELINA","ELFRIEDA","DANYEL","CHEREE","CHANELLE","BARRIE","AVERY","AURORE","ANNAMARIA","ALLEEN","AILENE","AIDE","YASMINE","VASHTI","VALENTINE","TREASA","TORY","TIFFANEY","SHERYLL","SHARIE","SHANAE","SAU","RAISA","PA","NEDA","MITSUKO","MIRELLA","MILDA","MARYANNA","MARAGRET","MABELLE","LUETTA","LORINA","LETISHA","LATARSHA","LANELLE","LAJUANA","KRISSY","KARLY","KARENA","JON","JESSIKA","JERICA","JEANELLE","JANUARY","JALISA","JACELYN","IZOLA","IVEY","GREGORY","EUNA","ETHA","DREW","DOMITILA","DOMINICA","DAINA","CREOLA","CARLI","CAMIE","BUNNY","BRITTNY","ASHANTI","ANISHA","ALEEN","ADAH","YASUKO","WINTER","VIKI","VALRIE","TONA","TINISHA","THI","TERISA","TATUM","TANEKA","SIMONNE","SHALANDA","SERITA","RESSIE","REFUGIA","PAZ","OLENE","NA","MERRILL","MARGHERITA","MANDIE","MAN","MAIRE","LYNDIA","LUCI","LORRIANE","LORETA","LEONIA","LAVONA","LASHAWNDA","LAKIA","KYOKO","KRYSTINA","KRYSTEN","KENIA","KELSI","JUDE","JEANICE","ISOBEL","GEORGIANN","GENNY","FELICIDAD","EILENE","DEON","DELOISE","DEEDEE","DANNIE","CONCEPTION","CLORA","CHERILYN","CHANG","CALANDRA","BERRY","ARMANDINA","ANISA","ULA","TIMOTHY","TIERA","THERESSA","STEPHANIA","SIMA","SHYLA","SHONTA","SHERA","SHAQUITA","SHALA","SAMMY","ROSSANA","NOHEMI","NERY","MORIAH","MELITA","MELIDA","MELANI","MARYLYNN","MARISHA","MARIETTE","MALORIE","MADELENE","LUDIVINA","LORIA","LORETTE","LORALEE","LIANNE","LEON","LAVENIA","LAURINDA","LASHON","KIT","KIMI","KEILA","KATELYNN","KAI","JONE","JOANE","JI","JAYNA","JANELLA","JA","HUE","HERTHA","FRANCENE","ELINORE","DESPINA","DELSIE","DEEDRA","CLEMENCIA","CARRY","CAROLIN","CARLOS","BULAH","BRITTANIE","BOK","BLONDELL","BIBI","BEAULAH","BEATA","ANNITA","AGRIPINA","VIRGEN","VALENE","UN","TWANDA","TOMMYE","TOI","TARRA","TARI","TAMMERA","SHAKIA","SADYE","RUTHANNE","ROCHEL","RIVKA","PURA","NENITA","NATISHA","MING","MERRILEE","MELODEE","MARVIS","LUCILLA","LEENA","LAVETA","LARITA","LANIE","KEREN","ILEEN","GEORGEANN","GENNA","GENESIS","FRIDA","EWA","EUFEMIA","EMELY","ELA","EDYTH","DEONNA","DEADRA","DARLENA","CHANELL","CHAN","CATHERN","CASSONDRA","CASSAUNDRA","BERNARDA","BERNA","ARLINDA","ANAMARIA","ALBERT","WESLEY","VERTIE","VALERI","TORRI","TATYANA","STASIA","SHERISE","SHERILL","SEASON","SCOTTIE","SANDA","RUTHE","ROSY","ROBERTO","ROBBI","RANEE","QUYEN","PEARLY","PALMIRA","ONITA","NISHA","NIESHA","NIDA","NEVADA","NAM","MERLYN","MAYOLA","MARYLOUISE","MARYLAND","MARX","MARTH","MARGENE","MADELAINE","LONDA","LEONTINE","LEOMA","LEIA","LAWRENCE","LAURALEE","LANORA","LAKITA","KIYOKO","KETURAH","KATELIN","KAREEN","JONIE","JOHNETTE","JENEE","JEANETT","IZETTA","HIEDI","HEIKE","HASSIE","HAROLD","GIUSEPPINA","GEORGANN","FIDELA","FERNANDE","ELWANDA","ELLAMAE","ELIZ","DUSTI","DOTTY","CYNDY","CORALIE","CELESTA","ARGENTINA","ALVERTA","XENIA","WAVA","VANETTA","TORRIE","TASHINA","TANDY","TAMBRA","TAMA","STEPANIE","SHILA","SHAUNTA","SHARAN","SHANIQUA","SHAE","SETSUKO","SERAFINA","SANDEE","ROSAMARIA","PRISCILA","OLINDA","NADENE","MUOI","MICHELINA","MERCEDEZ","MARYROSE","MARIN","MARCENE","MAO","MAGALI","MAFALDA","LOGAN","LINN","LANNIE","KAYCE","KAROLINE","KAMILAH","KAMALA","JUSTA","JOLINE","JENNINE","JACQUETTA","IRAIDA","GERALD","GEORGEANNA","FRANCHESCA","FAIRY","EMELINE","ELANE","EHTEL","EARLIE","DULCIE","DALENE","CRIS","CLASSIE","CHERE","CHARIS","CAROYLN","CARMINA","CARITA","BRIAN","BETHANIE","AYAKO","ARICA","AN","ALYSA","ALESSANDRA","AKILAH","ADRIEN","ZETTA","YOULANDA","YELENA","YAHAIRA","XUAN","WENDOLYN","VICTOR","TIJUANA","TERRELL","TERINA","TERESIA","SUZI","SUNDAY","SHERELL","SHAVONDA","SHAUNTE","SHARDA","SHAKITA","SENA","RYANN","RUBI","RIVA","REGINIA","REA","RACHAL","PARTHENIA","PAMULA","MONNIE","MONET","MICHAELE","MELIA","MARINE","MALKA","MAISHA","LISANDRA","LEO","LEKISHA","LEAN","LAURENCE","LAKENDRA","KRYSTIN","KORTNEY","KIZZIE","KITTIE","KERA","KENDAL","KEMBERLY","KANISHA","JULENE","JULE","JOSHUA","JOHANNE","JEFFREY","JAMEE","HAN","HALLEY","GIDGET","GALINA","FREDRICKA","FLETA","FATIMAH","EUSEBIA","ELZA","ELEONORE","DORTHEY","DORIA","DONELLA","DINORAH","DELORSE","CLARETHA","CHRISTINIA","CHARLYN","BONG","BELKIS","AZZIE","ANDERA","AIKO","ADENA","YER","YAJAIRA","WAN","VANIA","ULRIKE","TOSHIA","TIFANY","STEFANY","SHIZUE","SHENIKA","SHAWANNA","SHAROLYN","SHARILYN","SHAQUANA","SHANTAY","SEE","ROZANNE","ROSELEE","RICKIE","REMONA","REANNA","RAELENE","QUINN","PHUNG","PETRONILA","NATACHA","NANCEY","MYRL","MIYOKO","MIESHA","MERIDETH","MARVELLA","MARQUITTA","MARHTA","MARCHELLE","LIZETH","LIBBIE","LAHOMA","LADAWN","KINA","KATHELEEN","KATHARYN","KARISA","KALEIGH","JUNIE","JULIEANN","JOHNSIE","JANEAN","JAIMEE","JACKQUELINE","HISAKO","HERMA","HELAINE","GWYNETH","GLENN","GITA","EUSTOLIA","EMELINA","ELIN","EDRIS","DONNETTE","DONNETTA","DIERDRE","DENAE","DARCEL","CLAUDE","CLARISA","CINDERELLA","CHIA","CHARLESETTA","CHARITA","CELSA","CASSY","CASSI","CARLEE","BRUNA","BRITTANEY","BRANDE","BILLI","BAO","ANTONETTA","ANGLA","ANGELYN","ANALISA","ALANE","WENONA","WENDIE","VERONIQUE","VANNESA","TOBIE","TEMPIE","SUMIKO","SULEMA","SPARKLE","SOMER","SHEBA","SHAYNE","SHARICE","SHANEL","SHALON","SAGE","ROY","ROSIO","ROSELIA","RENAY","REMA","REENA","PORSCHE","PING","PEG","OZIE","ORETHA","ORALEE","ODA","NU","NGAN","NAKESHA","MILLY","MARYBELLE","MARLIN","MARIS","MARGRETT","MARAGARET","MANIE","LURLENE","LILLIA","LIESELOTTE","LAVELLE","LASHAUNDA","LAKEESHA","KEITH","KAYCEE","KALYN","JOYA","JOETTE","JENAE","JANIECE","ILLA","GRISEL","GLAYDS","GENEVIE","GALA","FREDDA","FRED","ELMER","ELEONOR","DEBERA","DEANDREA","DAN","CORRINNE","CORDIA","CONTESSA","COLENE","CLEOTILDE","CHARLOTT","CHANTAY","CECILLE","BEATRIS","AZALEE","ARLEAN","ARDATH","ANJELICA","ANJA","ALFREDIA","ALEISHA","ADAM","ZADA","YUONNE","XIAO","WILLODEAN","WHITLEY","VENNIE","VANNA","TYISHA","TOVA","TORIE","TONISHA","TILDA","TIEN","TEMPLE","SIRENA","SHERRIL","SHANTI","SHAN","SENAIDA","SAMELLA","ROBBYN","RENDA","REITA","PHEBE","PAULITA","NOBUKO","NGUYET","NEOMI","MOON","MIKAELA","MELANIA","MAXIMINA","MARG","MAISIE","LYNNA","LILLI","LAYNE","LASHAUN","LAKENYA","LAEL","KIRSTIE","KATHLINE","KASHA","KARLYN","KARIMA","JOVAN","JOSEFINE","JENNELL","JACQUI","JACKELYN","HYO","HIEN","GRAZYNA","FLORRIE","FLORIA","ELEONORA","DWANA","DORLA","DONG","DELMY","DEJA","DEDE","DANN","CRYSTA","CLELIA","CLARIS","CLARENCE","CHIEKO","CHERLYN","CHERELLE","CHARMAIN","CHARA","CAMMY","BEE","ARNETTE","ARDELLE","ANNIKA","AMIEE","AMEE","ALLENA","YVONE","YUKI","YOSHIE","YEVETTE","YAEL","WILLETTA","VONCILE","VENETTA","TULA","TONETTE","TIMIKA","TEMIKA","TELMA","TEISHA","TAREN","TA","STACEE","SHIN","SHAWNTA","SATURNINA","RICARDA","POK","PASTY","ONIE","NUBIA","MORA","MIKE","MARIELLE","MARIELLA","MARIANELA","MARDELL","MANY","LUANNA","LOISE","LISABETH","LINDSY","LILLIANA","LILLIAM","LELAH","LEIGHA","LEANORA","LANG","KRISTEEN","KHALILAH","KEELEY","KANDRA","JUNKO","JOAQUINA","JERLENE","JANI","JAMIKA","JAME","HSIU","HERMILA","GOLDEN","GENEVIVE","EVIA","EUGENA","EMMALINE","ELFREDA","ELENE","DONETTE","DELCIE","DEEANNA","DARCEY","CUC","CLARINDA","CIRA","CHAE","CELINDA","CATHERYN","CATHERIN","CASIMIRA","CARMELIA","CAMELLIA","BREANA","BOBETTE","BERNARDINA","BEBE","BASILIA","ARLYNE","AMAL","ALAYNA","ZONIA","ZENIA","YURIKO","YAEKO","WYNELL","WILLOW","WILLENA","VERNIA","TU","TRAVIS","TORA","TERRILYN","TERICA","TENESHA","TAWNA","TAJUANA","TAINA","STEPHNIE","SONA","SOL","SINA","SHONDRA","SHIZUKO","SHERLENE","SHERICE","SHARIKA","ROSSIE","ROSENA","RORY","RIMA","RIA","RHEBA","RENNA","PETER","NATALYA","NANCEE","MELODI","MEDA","MAXIMA","MATHA","MARKETTA","MARICRUZ","MARCELENE","MALVINA","LUBA","LOUETTA","LEIDA","LECIA","LAURAN","LASHAWNA","LAINE","KHADIJAH","KATERINE","KASI","KALLIE","JULIETTA","JESUSITA","JESTINE","JESSIA","JEREMY","JEFFIE","JANYCE","ISADORA","GEORGIANNE","FIDELIA","EVITA","EURA","EULAH","ESTEFANA","ELSY","ELIZABET","ELADIA","DODIE","DION","DIA","DENISSE","DELORAS","DELILA","DAYSI","DAKOTA","CURTIS","CRYSTLE","CONCHA","COLBY","CLARETTA","CHU","CHRISTIA","CHARLSIE","CHARLENA","CARYLON","BETTYANN","ASLEY","ASHLEA","AMIRA","AI","AGUEDA","AGNUS","YUETTE","VINITA","VICTORINA","TYNISHA","TREENA","TOCCARA","TISH","THOMASENA","TEGAN","SOILA","SHILOH","SHENNA","SHARMAINE","SHANTAE","SHANDI","SEPTEMBER","SARAN","SARAI","SANA","SAMUEL","SALLEY","ROSETTE","ROLANDE","REGINE","OTELIA","OSCAR","OLEVIA","NICHOLLE","NECOLE","NAIDA","MYRTA","MYESHA","MITSUE","MINTA","MERTIE","MARGY","MAHALIA","MADALENE","LOVE","LOURA","LOREAN","LEWIS","LESHA","LEONIDA","LENITA","LAVONE","LASHELL","LASHANDRA","LAMONICA","KIMBRA","KATHERINA","KARRY","KANESHA","JULIO","JONG","JENEVA","JAQUELYN","HWA","GILMA","GHISLAINE","GERTRUDIS","FRANSISCA","FERMINA","ETTIE","ETSUKO","ELLIS","ELLAN","ELIDIA","EDRA","DORETHEA","DOREATHA","DENYSE","DENNY","DEETTA","DAINE","CYRSTAL","CORRIN","CAYLA","CARLITA","CAMILA","BURMA","BULA","BUENA","BLAKE","BARABARA","AVRIL","AUSTIN","ALAINE","ZANA","WILHEMINA","WANETTA","VIRGIL","VI","VERONIKA","VERNON","VERLINE","VASILIKI","TONITA","TISA","TEOFILA","TAYNA","TAUNYA","TANDRA","TAKAKO","SUNNI","SUANNE","SIXTA","SHARELL","SEEMA","RUSSELL","ROSENDA","ROBENA","RAYMONDE","PEI","PAMILA","OZELL","NEIDA","NEELY","MISTIE","MICHA","MERISSA","MAURITA","MARYLN","MARYETTA","MARSHALL","MARCELL","MALENA","MAKEDA","MADDIE","LOVETTA","LOURIE","LORRINE","LORILEE","LESTER","LAURENA","LASHAY","LARRAINE","LAREE","LACRESHA","KRISTLE","KRISHNA","KEVA","KEIRA","KAROLE","JOIE","JINNY","JEANNETTA","JAMA","HEIDY","GILBERTE","GEMA","FAVIOLA","EVELYNN","ENDA","ELLI","ELLENA","DIVINA","DAGNY","COLLENE","CODI","CINDIE","CHASSIDY","CHASIDY","CATRICE","CATHERINA","CASSEY","CAROLL","CARLENA","CANDRA","CALISTA","BRYANNA","BRITTENY","BEULA","BARI","AUDRIE","AUDRIA","ARDELIA","ANNELLE","ANGILA","ALONA","ALLYN","DOUGLAS","ROGER","JONATHAN","RALPH","NICHOLAS","BENJAMIN","BRUCE","HARRY","WAYNE","STEVE","HOWARD","ERNEST","PHILLIP","TODD","CRAIG","ALAN","PHILIP","EARL","DANNY","BRYAN","STANLEY","LEONARD","NATHAN","MANUEL","RODNEY","MARVIN","VINCENT","JEFFERY","JEFF","CHAD","JACOB","ALFRED","BRADLEY","HERBERT","FREDERICK","EDWIN","DON","RICKY","RANDALL","BARRY","BERNARD","LEROY","MARCUS","THEODORE","CLIFFORD","MIGUEL","JIM","TOM","CALVIN","BILL","LLOYD","DEREK","WARREN","DARRELL","JEROME","FLOYD","ALVIN","TIM","GORDON","GREG","JORGE","DUSTIN","PEDRO","DERRICK","ZACHARY","HERMAN","GLEN","HECTOR","RICARDO","RICK","BRENT","RAMON","GILBERT","MARC","REGINALD","RUBEN","NATHANIEL","RAFAEL","EDGAR","MILTON","RAUL","BEN","CHESTER","DUANE","FRANKLIN","BRAD","RON","ROLAND","ARNOLD","HARVEY","JARED","ERIK","DARRYL","NEIL","JAVIER","FERNANDO","CLINTON","TED","MATHEW","TYRONE","DARREN","LANCE","KURT","ALLAN","NELSON","GUY","CLAYTON","HUGH","MAX","DWAYNE","DWIGHT","ARMANDO","FELIX","EVERETT","IAN","WALLACE","KEN","BOB","ALFREDO","ALBERTO","DAVE","IVAN","BYRON","ISAAC","MORRIS","CLIFTON","WILLARD","ROSS","ANDY","SALVADOR","KIRK","SERGIO","SETH","KENT","TERRANCE","EDUARDO","TERRENCE","ENRIQUE","WADE","STUART","FREDRICK","ARTURO","ALEJANDRO","NICK","LUTHER","WENDELL","JEREMIAH","JULIUS","OTIS","TREVOR","OLIVER","LUKE","HOMER","GERARD","DOUG","KENNY","HUBERT","LYLE","MATT","ALFONSO","ORLANDO","REX","CARLTON","ERNESTO","NEAL","PABLO","LORENZO","OMAR","WILBUR","GRANT","HORACE","RODERICK","ABRAHAM","WILLIS","RICKEY","ANDRES","CESAR","JOHNATHAN","MALCOLM","RUDOLPH","DAMON","KELVIN","PRESTON","ALTON","ARCHIE","MARCO","WM","PETE","RANDOLPH","GARRY","GEOFFREY","JONATHON","FELIPE","GERARDO","ED","DOMINIC","DELBERT","COLIN","GUILLERMO","EARNEST","LUCAS","BENNY","SPENCER","RODOLFO","MYRON","EDMUND","GARRETT","SALVATORE","CEDRIC","LOWELL","GREGG","SHERMAN","WILSON","SYLVESTER","ROOSEVELT","ISRAEL","JERMAINE","FORREST","WILBERT","LELAND","SIMON","CLARK","IRVING","BRYANT","OWEN","RUFUS","WOODROW","KRISTOPHER","MACK","LEVI","MARCOS","GUSTAVO","JAKE","LIONEL","GILBERTO","CLINT","NICOLAS","ISMAEL","ORVILLE","ERVIN","DEWEY","AL","WILFRED","JOSH","HUGO","IGNACIO","CALEB","TOMAS","SHELDON","ERICK","STEWART","DOYLE","DARREL","ROGELIO","TERENCE","SANTIAGO","ALONZO","ELIAS","BERT","ELBERT","RAMIRO","CONRAD","NOAH","GRADY","PHIL","CORNELIUS","LAMAR","ROLANDO","CLAY","PERCY","DEXTER","BRADFORD","DARIN","AMOS","MOSES","IRVIN","SAUL","ROMAN","RANDAL","TIMMY","DARRIN","WINSTON","BRENDAN","ABEL","DOMINICK","BOYD","EMILIO","ELIJAH","DOMINGO","EMMETT","MARLON","EMANUEL","JERALD","EDMOND","EMIL","DEWAYNE","WILL","OTTO","TEDDY","REYNALDO","BRET","JESS","TRENT","HUMBERTO","EMMANUEL","STEPHAN","VICENTE","LAMONT","GARLAND","MILES","EFRAIN","HEATH","RODGER","HARLEY","ETHAN","ELDON","ROCKY","PIERRE","JUNIOR","FREDDY","ELI","BRYCE","ANTOINE","STERLING","CHASE","GROVER","ELTON","CLEVELAND","DYLAN","CHUCK","DAMIAN","REUBEN","STAN","AUGUST","LEONARDO","JASPER","RUSSEL","ERWIN","BENITO","HANS","MONTE","BLAINE","ERNIE","CURT","QUENTIN","AGUSTIN","MURRAY","JAMAL","ADOLFO","HARRISON","TYSON","BURTON","BRADY","ELLIOTT","WILFREDO","BART","JARROD","VANCE","DENIS","DAMIEN","JOAQUIN","HARLAN","DESMOND","ELLIOT","DARWIN","GREGORIO","BUDDY","XAVIER","KERMIT","ROSCOE","ESTEBAN","ANTON","SOLOMON","SCOTTY","NORBERT","ELVIN","WILLIAMS","NOLAN","ROD","QUINTON","HAL","BRAIN","ROB","ELWOOD","KENDRICK","DARIUS","MOISES","FIDEL","THADDEUS","CLIFF","MARCEL","JACKSON","RAPHAEL","BRYON","ARMAND","ALVARO","JEFFRY","DANE","JOESPH","THURMAN","NED","RUSTY","MONTY","FABIAN","REGGIE","MASON","GRAHAM","ISAIAH","VAUGHN","GUS","LOYD","DIEGO","ADOLPH","NORRIS","MILLARD","ROCCO","GONZALO","DERICK","RODRIGO","WILEY","RIGOBERTO","ALPHONSO","TY","NOE","VERN","REED","JEFFERSON","ELVIS","BERNARDO","MAURICIO","HIRAM","DONOVAN","BASIL","RILEY","NICKOLAS","MAYNARD","SCOT","VINCE","QUINCY","EDDY","SEBASTIAN","FEDERICO","ULYSSES","HERIBERTO","DONNELL","COLE","DAVIS","GAVIN","EMERY","WARD","ROMEO","JAYSON","DANTE","CLEMENT","COY","MAXWELL","JARVIS","BRUNO","ISSAC","DUDLEY","BROCK","SANFORD","CARMELO","BARNEY","NESTOR","STEFAN","DONNY","ART","LINWOOD","BEAU","WELDON","GALEN","ISIDRO","TRUMAN","DELMAR","JOHNATHON","SILAS","FREDERIC","DICK","IRWIN","MERLIN","CHARLEY","MARCELINO","HARRIS","CARLO","TRENTON","KURTIS","HUNTER","AURELIO","WINFRED","VITO","COLLIN","DENVER","CARTER","LEONEL","EMORY","PASQUALE","MOHAMMAD","MARIANO","DANIAL","LANDON","DIRK","BRANDEN","ADAN","BUFORD","GERMAN","WILMER","EMERSON","ZACHERY","FLETCHER","JACQUES","ERROL","DALTON","MONROE","JOSUE","EDWARDO","BOOKER","WILFORD","SONNY","SHELTON","CARSON","THERON","RAYMUNDO","DAREN","HOUSTON","ROBBY","LINCOLN","GENARO","BENNETT","OCTAVIO","CORNELL","HUNG","ARRON","ANTONY","HERSCHEL","GIOVANNI","GARTH","CYRUS","CYRIL","RONNY","LON","FREEMAN","DUNCAN","KENNITH","CARMINE","ERICH","CHADWICK","WILBURN","RUSS","REID","MYLES","ANDERSON","MORTON","JONAS","FOREST","MITCHEL","MERVIN","ZANE","RICH","JAMEL","LAZARO","ALPHONSE","RANDELL","MAJOR","JARRETT","BROOKS","ABDUL","LUCIANO","SEYMOUR","EUGENIO","MOHAMMED","VALENTIN","CHANCE","ARNULFO","LUCIEN","FERDINAND","THAD","EZRA","ALDO","RUBIN","ROYAL","MITCH","EARLE","ABE","WYATT","MARQUIS","LANNY","KAREEM","JAMAR","BORIS","ISIAH","EMILE","ELMO","ARON","LEOPOLDO","EVERETTE","JOSEF","ELOY","RODRICK","REINALDO","LUCIO","JERROD","WESTON","HERSHEL","BARTON","PARKER","LEMUEL","BURT","JULES","GIL","ELISEO","AHMAD","NIGEL","EFREN","ANTWAN","ALDEN","MARGARITO","COLEMAN","DINO","OSVALDO","LES","DEANDRE","NORMAND","KIETH","TREY","NORBERTO","NAPOLEON","JEROLD","FRITZ","ROSENDO","MILFORD","CHRISTOPER","ALFONZO","LYMAN","JOSIAH","BRANT","WILTON","RICO","JAMAAL","DEWITT","BRENTON","OLIN","FOSTER","FAUSTINO","CLAUDIO","JUDSON","GINO","EDGARDO","ALEC","TANNER","JARRED","DONN","TAD","PRINCE","PORFIRIO","ODIS","LENARD","CHAUNCEY","TOD","MEL","MARCELO","KORY","AUGUSTUS","KEVEN","HILARIO","BUD","SAL","ORVAL","MAURO","ZACHARIAH","OLEN","ANIBAL","MILO","JED","DILLON","AMADO","NEWTON","LENNY","RICHIE","HORACIO","BRICE","MOHAMED","DELMER","DARIO","REYES","MAC","JONAH","JERROLD","ROBT","HANK","RUPERT","ROLLAND","KENTON","DAMION","ANTONE","WALDO","FREDRIC","BRADLY","KIP","BURL","WALKER","TYREE","JEFFEREY","AHMED","WILLY","STANFORD","OREN","NOBLE","MOSHE","MIKEL","ENOCH","BRENDON","QUINTIN","JAMISON","FLORENCIO","DARRICK","TOBIAS","HASSAN","GIUSEPPE","DEMARCUS","CLETUS","TYRELL","LYNDON","KEENAN","WERNER","GERALDO","COLUMBUS","CHET","BERTRAM","MARKUS","HUEY","HILTON","DWAIN","DONTE","TYRON","OMER","ISAIAS","HIPOLITO","FERMIN","ADALBERTO","BO","BARRETT","TEODORO","MCKINLEY","MAXIMO","GARFIELD","RALEIGH","LAWERENCE","ABRAM","RASHAD","KING","EMMITT","DARON","SAMUAL","MIQUEL","EUSEBIO","DOMENIC","DARRON","BUSTER","WILBER","RENATO","JC","HOYT","HAYWOOD","EZEKIEL","CHAS","FLORENTINO","ELROY","CLEMENTE","ARDEN","NEVILLE","EDISON","DESHAWN","NATHANIAL","JORDON","DANILO","CLAUD","SHERWOOD","RAYMON","RAYFORD","CRISTOBAL","AMBROSE","TITUS","HYMAN","FELTON","EZEQUIEL","ERASMO","STANTON","LONNY","LEN","IKE","MILAN","LINO","JAROD","HERB","ANDREAS","WALTON","RHETT","PALMER","DOUGLASS","CORDELL","OSWALDO","ELLSWORTH","VIRGILIO","TONEY","NATHANAEL","DEL","BENEDICT","MOSE","JOHNSON","ISREAL","GARRET","FAUSTO","ASA","ARLEN","ZACK","WARNER","MODESTO","FRANCESCO","MANUAL","GAYLORD","GASTON","FILIBERTO","DEANGELO","MICHALE","GRANVILLE","WES","MALIK","ZACKARY","TUAN","ELDRIDGE","CRISTOPHER","CORTEZ","ANTIONE","MALCOM","LONG","KOREY","JOSPEH","COLTON","WAYLON","VON","HOSEA","SHAD","SANTO","RUDOLF","ROLF","REY","RENALDO","MARCELLUS","LUCIUS","KRISTOFER","BOYCE","BENTON","HAYDEN","HARLAND","ARNOLDO","RUEBEN","LEANDRO","KRAIG","JERRELL","JEROMY","HOBERT","CEDRICK","ARLIE","WINFORD","WALLY","LUIGI","KENETH","JACINTO","GRAIG","FRANKLYN","EDMUNDO","SID","PORTER","LEIF","JERAMY","BUCK","WILLIAN","VINCENZO","SHON","LYNWOOD","JERE","HAI","ELDEN","DORSEY","DARELL","BRODERICK","ALONSO"};
}
class P023
{
    int abundant[]=new int[28123];
    boolean[] canBeWrittenasAbundant = new boolean[28123 + 1];
    public static void p023()
    {
        P023 ob=new P023();
        ob.storeAbundant();
        ob.markAbundant();
        int sum=ob.sumNonAbun();
        System.out.println("The sum of all the positive integers which cannot be written as the sum of two abundant numbers is: "+sum);
    }
    void storeAbundant()
    {
        for (int i = 2,j=0; i <= 28123; i++) {
            if (sumOfFactors(i) > i) {
                abundant[j]=i;j++;
            }

        }
    }
    void markAbundant()
    {
      for (int i = 0; i < abundant.length; i++)
      {
            for (int j = i; j < abundant.length; j++)
            {
                if (abundant[i] + abundant[j] <= 28123)
                {canBeWrittenasAbundant[abundant[i] + abundant[j]] = true;}
                else {break;}
            }
      }
    }
    int sumNonAbun()
    {
        int sum=0;
        for (int i = 1; i <= 28123; i++) 
        {
            if (!canBeWrittenasAbundant[i])
            {sum += i;}
        }
        return sum;
    }
    int sumOfFactors(int number) 
    {
        int sqrtOfNumber = (int)Math.sqrt(number);
        int sum = 1;
        //If the number is a perfect square count the squareroot once in the sum of factors 
        //This function uses a mathematical procedure to determine sum of proper factors which saves time resourses substantially
        if (number == sqrtOfNumber * sqrtOfNumber)
        {
            sum += sqrtOfNumber;
            sqrtOfNumber--;
        }
        for (int i = 2; i <= sqrtOfNumber; i++) {
            if (number % i == 0) {
                sum = sum + i + (number / i);
            }
        }
        return sum;
    }
}
class P024
{   int a[]={0,1,2,3,4,5,6,7,8,9};
    public static void p024()
    {
        String millp="";int i;
        P024 ob=new P024();
        for(i=1;i<=999999;i++)
        {
            ob.nextp();
        }
        for(i=0;i<10;i++)
        {
            millp=millp+Integer.toString(ob.a[i]);
        }
        System.out.println("The millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9 is: "+millp);
    }
    void nextp()
    {   
        int k,l,t,i;StringBuffer s; String st="";
        for(k=9;k>=0;k--)
        {
            if(a[k]>a[k-1]){k--;break;}
        }
        for(l=9;l>=k+1;l--)
        {
            if(a[k]<a[l]){break;}
        }
        t=a[k];
        a[k]=a[l];
        a[l]=t;
        for(i=k+1;i<=9;i++)
        { st=st+Integer.toString(a[i]);}
        s=new StringBuffer(st);
        s.reverse();
        st=s.toString();
        t=0;
        for(i=k+1;i<=9;i++,t++)
        {a[i]=st.charAt(t)-'0';}
    }
}
class P025
{   
    String a="1",b="1",c="";int count=2;
    public static void p025()
    {
        P025 ob=new P025();
        while(ob.c.length()<1000)
        { 
            ob.count++;
            ob.c=ob.addStringAsNums(ob.a,ob.b);
            ob.a=ob.b;
            ob.b=ob.c;
        }
        String t=Integer.toString(ob.count);
        int v=t.charAt(t.length()-1)-'0';
        if(v==1)
            System.out.println("The first term in the Fibonacci sequence to contain 1000 digits is: "+ob.count+"st term");
        else if(v==2)
            System.out.println("The first term in the Fibonacci sequence to contain 1000 digits is: "+ob.count+"nd term");
        else if(v==3)
            System.out.println("The first term in the Fibonacci sequence to contain 1000 digits is: "+ob.count+"rd term");
        else
            System.out.println("The first term in the Fibonacci sequence to contain 1000 digits is: "+ob.count+"th term");
    }
    String addStringAsNums(String s1,String s2)
    {
        long carry=0,sum=0;int d,k=1;String s="",str="";
        int l1=s1.length();int l2=s2.length();
        if(l1!=l2)
        {
            if(l1>l2)
            {for(int t=1;t<=(l1-l2);t++)
                {s2='0'+s2;}
            }
            else if(l2>l1)
            {for(int t=1;t<=(l2-l1);t++)
                {s1='0'+s1;}
            }
        }
        str=s1+s2;
        char a[]=str.toCharArray();
        int l=s1.length();
        for(int i=l-1;i>=0;i--)
        {   
            sum=0;k=1;
            for(int j=i;k<=2;j+=l,k++)
            {sum=sum+(a[j]-'0');}
            sum=sum+carry;
            carry=sum/10;
            d=(int)sum%10;
            if(i!=0)
            {s=Integer.toString(d)+s;}
            else 
                s=Long.toString(carry)+Integer.toString(d)+s;
        }
        for(int t=0;t<=s.length();t++)
        {
            if(s.charAt(t)!='0')
            {s= s.substring(t);break;}
        }
        return s;
    }
}
class P026
{
    public static void p026()
    {
        int sequenceLength = 0,i;
        for ( i = 999; i > 1; i--)
        {
            if (sequenceLength >= i) {break;}
            int[] foundRemainders = new int[i];
            int value = 1;
            int position = 0;
            while (foundRemainders[value] == 0 && value != 0) {//for the fractions whose decimal representation is a recurring decimal,this loop gets over when a remainder repeats itself(i.e. by 'foundRemainders[value] == 0' being false) and for the fractions whose decimal  representation is not a recurring decimal(i.e. those which completely divide like 1/2),this loop gets over when the remainder at a step is zero(i.e when 'value!=0' becomes false).
                foundRemainders[value] = position;
                value *= 10;
                value %= i;
                position++;
            }
            if (position - foundRemainders[value]/*in the statement on left,the minuend represents the last remainder's position where it ocurred second time and the subtrahend represents the position of the last remainder when it ocurred for the first time*/ > sequenceLength)// finds the recurring cycle length by subtracting from last remainder's second position its first position(because whenever a remainder repeats itself(which happens only when the digits are recurring), the loop gets over,and for the fractions whose decimal representations have recurring digits(which do not completely divide like 1/7 which have 6 recurring digits) ,the loop gets over only when the a remainder repeats itself which ensures that the last remainder which terminated the loop  must have already ocurred at a position before this occurence). Thus, it makes sense to find the recurring cycle's length by subtracting the initial position of the last remainder from its second position.
            {
                sequenceLength = position - foundRemainders[value];
            }
        }
        System.out.println("The value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part is: "+(i+1));
    }
}
class P027
{
    public static void p027()
    {
        P027 ob=new P027();
        int aMax = 0, bMax = 0, nMax = 0;
        for (int a = -1000; a <= 1000; a++) 
        {
            for(int b = -1000; b <= 1000; b++)
            {
                int n = 0;
                while (ob.isPrime(Math.abs(n * n + a * n + b)))
                {n++;}
                if (n > nMax) 
                {   aMax = a;
                    bMax = b;
                    nMax = n;
                }
            }
        }
        System.out.println("The product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0 is: "+(aMax*bMax));
    }
    boolean isPrime(int n)
    {
        for(int i=2;i<=Math.sqrt(n);i++)
        {
            if(n%i==0){return false;}
        }
        return true;
    }
}
class P028
{
    public static void p028()
    {   int sum=1;//initialised with 1 to store one of the 1's present in two diagonals
        int pt=1;//always stores the previous number to be added and here stores 1 to add the 1 of other diagonal
        /*Thus we have both 1's already stored and therefore we just need to add the corner elements of subarrays i.e
        corner elements of (2n+1)x(2n+1) subarrays[0<=n<=501]. Hence we only need the corner elements of 3x3,5x5,........1001x1001 
        arrays formed out of 1001x1001 array(we start extraction of subarrays from centre of the 1001x1001 array.
        For this very purpose,the code here uses a loop which adds corner elements of required arrays instead of making a spiral 
        1001x1001 array and then adding diagonals from it.*/ 
        for(int i=3;i<=1001;i+=2)
        {
            for(int j=1;j<=4;j++)
            {pt=pt+(i-1);sum=sum+pt;}
        }
        System.out.println("The sum of the numbers on the diagonals in a 1001 by 1001 spiral is: "+sum);
    }
}
class P029
{  /* I have sorted the array at last only because otherwise I wasn't following the question precisely.
    Although the answer(the number of distinct terms) remains same in both the cases(with and without sorting) but the sorting at last didn't
    exploit too much time therefore I decided to put it in so as so get more 'as per question' source code.
    Still, I would say that this sorting is a waste of time because it has nothing to do with the actual problem dealt here.*/

    double a[]=new double[99*99];int top=-1;//because 99*99 is the maximum number of distinct terms which are possible
   public static void p029()
    {
        P029 ob=new P029();

        for(int i=2;i<=100;i++)
        {
            for(int j=2;j<=100;j++)
            {   ob.writeNum(Math.pow(i,j));

            }
        }
        ob.sort();
        System.out.println("The number of distinct terms in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100 is: "+(ob.top+1));
        //top+1 because last value of top is the last index of a[] which stores a non-zero(0.0)  value(i.e. the last term of the required sequence), hence the number of terms 
        //will be top+1 
    }
   void sort()
    {   
        int minp=0; double small=0.0;
        for(int i=0;i<top;i++)
        {
            minp=i;small=a[i];
            for(int j=i+1;j<=top;j++)
            {
                if(small>a[j]&&a[j]!=0)
                { minp=j;small=a[j];}
            }
            double t=a[minp];
            a[minp]=a[i];
            a[i]=t;
        }
    }
   void writeNum(double d)
    {

        if(toBeAdded(d))
        {
            a[++top]=d;

        }
    }
   boolean toBeAdded(double c)
    {
        for(int h=0;h<=top;h++)
        {
            if(c==a[h]){return false;}
        }
        return true;
    }
}
class P030
{
    /*There is nothing special about the solution once we have the limits for checking the numbers.Lets consider digits 1-9(because I haven't included them
    in the calculation),all these are single digits and so the can never be expressed as the sum of their digits(because they don't have digits,thay just 
    have a single digit).
    So we start checking from 10.
    Now lets decide the upper bound. For this consider the following data,

    Digits    Maximum number(n)	Maximum fifth      Comment
    power sum(n*9^5)

    9	       999,999,999	     531,441	        they need to have the same number of digits
    8	        99,999,999	     472,392	        nope, still too many
    7	         9,999,999	     413,343	        not quite there
    6	           999,999	     354,294	        a valid search limit
    Here we observe that the maximum possible fifth power sum of largest 9-digit number is very small when compared to the number
    itself. We took the greatest 9-digit number, so no other 9-digit number will give us fifth power sum greater than that given 
    by 999,999,999 .Thus, the maximum sum of 9-digits can just have 6 digits(at maximum),so any 9-digit number will never be equal
    to the fifth power sum of its digits(the sum will always be less because it will have lesser digits than the number).Similarly,
    if we exceed the digits and observe for 10-digit/11-digit number or so on, the number will increase and the digits in fifth power
    sum of the maximum possible number of these digits(10 or 11 or so on) will always be lesser than the digits in the number and 
    therefore any number with 10-digits/11-digits or further more digit numbers will never be equal to the fifth power sum of their 
    digits(always the sum being very less than the number).Similarly no 8-digit and 7-digit number have its fifth power sum equal
    to itself.The Max Possible Fifth Power Sum(MPFPS) of 6-digit numbers is 354,294 which is the fifth power sum of 999,999.Now 
    observe  the numbers from354,295 to999,998(both inclusive). All these numbers produce a fifth power sum less than 354,294(because
    this fifth power sum is only given by 999,999 and all other six digit numbers give fifth power sum less than 354,294 ) which
    will also be less than these numbers ,so no number of this range produces a fifth power sum equal to itself.Therefore, it is a futile 
    search if we run through all these numbers to check their equality with the fifth power sum. So we will need not search any 
    number from 354,295  to 999,998(both inclusive), we will also not search or 999,999(because we already know that its fifth power sum is less than itself).We will
    also not 354,294(because its fifth power sum is less than 354,294 i.e. less than itself because 354,294 is the 
    fifth power sum of max six digit number(999,999) only and all other 6-digit numbers have their fifth power sums less than 
    354,294,hence 354,294 being a 6-digit number will also have its fifth power sum less than 354,294).Thus we will search for all 
    the other numbers upto less than 354,294. Hence we have our upper bound as well. */
    public static void p030()
    {
        int result = 0;
        for (int i = 10; i < 354294; i++) 
        {
            int sumOfPowers = 0;
            int number = i;
            while (number > 0)
            {
                int d = number % 10;
                number /= 10;

                int temp = 1;
                for(int j = 1; j <= 5; j++)
                {
                    temp *= d;
                }
                sumOfPowers += temp;
            }
            if (sumOfPowers == i) {result += i;}
        }
        System.out.println("The sum of all the numbers that can be written as the sum of fifth powers of their digits is: "+result);
    }
}
        
